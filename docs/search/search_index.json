{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Documentation for the DHRI Curriculum website \u00b6 Subscribe to our mailing list","title":"Welcome"},{"location":"#welcome-to-the-documentation-for-the-dhri-curriculum-website","text":"Subscribe to our mailing list","title":"Welcome to the Documentation for the DHRI Curriculum website"},{"location":"backend/","text":"Overview of the Django workflow \u00b6 In order to explain the workflow of what happens in the application, here is a visual representation of the flow from the end user and the administrator end, and both of their interactions with the Django application. When the end user sends a HTTP request to the server, Django (in reality, Django's wsgi application, but we will not get into that now) will handle the request, and use its internal settings to send appropriate queries to the backend database . In this version (and the previous one), the database backend is a MySQL database. The database will send back its results, and Django will send the response to its template generator , which will create the response (in HTML format, in most cases, to the end user). On the administrator 's side, we can interact with django through the built-in manage.py command, via the command line. With our Django application comes a custom-built command that can run through Django's manage.py , and it's called build . The easiest way to run it, is to run python manage.py build (for more information about this command, see Populate Database ). Once you run the build command, it will loop through all repositories, downloading all of the markdown files from respective repositories, and parse them, using a \"home-cooked\" Python script. The script converts markdown to HTML, as well, first trying to do so through GitHub's REST API (via PyGithub ) and, if that fails, using the Python-Markdown package, with some plug-ins.","title":"Overview of the Django workflow"},{"location":"backend/#overview-of-the-django-workflow","text":"In order to explain the workflow of what happens in the application, here is a visual representation of the flow from the end user and the administrator end, and both of their interactions with the Django application. When the end user sends a HTTP request to the server, Django (in reality, Django's wsgi application, but we will not get into that now) will handle the request, and use its internal settings to send appropriate queries to the backend database . In this version (and the previous one), the database backend is a MySQL database. The database will send back its results, and Django will send the response to its template generator , which will create the response (in HTML format, in most cases, to the end user). On the administrator 's side, we can interact with django through the built-in manage.py command, via the command line. With our Django application comes a custom-built command that can run through Django's manage.py , and it's called build . The easiest way to run it, is to run python manage.py build (for more information about this command, see Populate Database ). Once you run the build command, it will loop through all repositories, downloading all of the markdown files from respective repositories, and parse them, using a \"home-cooked\" Python script. The script converts markdown to HTML, as well, first trying to do so through GitHub's REST API (via PyGithub ) and, if that fails, using the Python-Markdown package, with some plug-ins.","title":"Overview of the Django workflow"},{"location":"backend/1-installing-a-local-instance/","text":"1. Installing a local instance \u00b6 Step 1. Clone the repository \u00b6 First, clone this directory to your local computer by navigating to the parent directory where you want to place the django-app folder, and then running the following command: $ git clone https://github.com/DHRI-Curriculum/django-app Cloning into 'django-app'... ... Resolving deltas: 100% (1843/1843), done. After it is finished, navigate into the repository, using: $ cd django-app Step 2. Create virtual enviroment \u00b6 Next, create a virtual environment for Django to run in: $ python -m venv env Then activate the environment: $ source env/bin/activate Step 3: Install requirements \u00b6 The script contains a requirements.txt file in the root of the repository, which makes it easy for you to run a command to run all the required dependencies: $ pip install -r requirements.txt Collecting django==3.0.7 (from -r requirements.txt (line 1)) ... That should show you the progress of the installation of all the python dependencies for the project. Step 4: Add your secrets \u00b6 Set up all your secrets as environment variables: $ SECRET_KEY=\"<create a django secret key here>\" $ EMAIL_HOST_USER=\"<insert your email user here>\" $ EMAIL_HOST_PASSWORD=\"<insert your email password here>\" $ GITHUB_TOKEN=\"<insert your GitHub token here>\" Optional step: Backup solution \u00b6 If you want to create a backup solution for the secret keys, put the values (with no surrounding quotation marks) of them into a text file with the name for the variable into the ./app/.secrets/ directory. Thus, the directory should look as follows: django-app | |--- app | |---- .secrets | |--- SECRET_KEY |--- EMAIL_HOST_USER |--- EMAIL_HOST_PASSWORD |--- GITHUB_TOKEN |","title":"1. Installing required components"},{"location":"backend/1-installing-a-local-instance/#1-installing-a-local-instance","text":"","title":"1. Installing a local instance"},{"location":"backend/1-installing-a-local-instance/#step-1-clone-the-repository","text":"First, clone this directory to your local computer by navigating to the parent directory where you want to place the django-app folder, and then running the following command: $ git clone https://github.com/DHRI-Curriculum/django-app Cloning into 'django-app'... ... Resolving deltas: 100% (1843/1843), done. After it is finished, navigate into the repository, using: $ cd django-app","title":"Step 1. Clone the repository"},{"location":"backend/1-installing-a-local-instance/#step-2-create-virtual-enviroment","text":"Next, create a virtual environment for Django to run in: $ python -m venv env Then activate the environment: $ source env/bin/activate","title":"Step 2. Create virtual enviroment"},{"location":"backend/1-installing-a-local-instance/#step-3-install-requirements","text":"The script contains a requirements.txt file in the root of the repository, which makes it easy for you to run a command to run all the required dependencies: $ pip install -r requirements.txt Collecting django==3.0.7 (from -r requirements.txt (line 1)) ... That should show you the progress of the installation of all the python dependencies for the project.","title":"Step 3: Install requirements"},{"location":"backend/1-installing-a-local-instance/#step-4-add-your-secrets","text":"Set up all your secrets as environment variables: $ SECRET_KEY=\"<create a django secret key here>\" $ EMAIL_HOST_USER=\"<insert your email user here>\" $ EMAIL_HOST_PASSWORD=\"<insert your email password here>\" $ GITHUB_TOKEN=\"<insert your GitHub token here>\"","title":"Step 4: Add your secrets"},{"location":"backend/1-installing-a-local-instance/#optional-step-backup-solution","text":"If you want to create a backup solution for the secret keys, put the values (with no surrounding quotation marks) of them into a text file with the name for the variable into the ./app/.secrets/ directory. Thus, the directory should look as follows: django-app | |--- app | |---- .secrets | |--- SECRET_KEY |--- EMAIL_HOST_USER |--- EMAIL_HOST_PASSWORD |--- GITHUB_TOKEN |","title":"Optional step: Backup solution"},{"location":"backend/2-populating-the-database/","text":"2. Populating the Database \u00b6 In order to populate (and update) the content on the DHRI curriculum website using the live data from GitHub, there is a simple two-part process. This app has been built with support to: mirror all the data from the DHRI Curriculum; and ingest the data into the database. The two sections below should cover the process in general, and also provides link to more detailed information if you want to dig deeper into the process. If your database is not yet set up, you will need to first set up the database by running two commands from Django's built-in management script. To make the process smoother, you can comine both on the command line by joining them using && : $ python manage.py makemigrations && python manage.py migrate That should tell you which migrations that will run, and then proceed to run the migrations: No changes detected Operations to perform: Apply all migrations: admin, assessment, auth, contenttypes, feedback, glossary, insight, install, learner, lesson, library, sessions, website, workshop Running migrations: Applying contenttypes.0001_initial... OK Applying auth.0001_initial... OK ... Step 1. Mirror the live data: build \u00b6 Next, we want to make a mirrored copy of all of the data that lives in the GitHub repositories related to the DHRI curriculum. We can do so with the build shortcut command: $ python manage.py build This will take some time\u2014up to several minutes\u2014so get yourself a cup of coffee. You're doing well! The build command should create a local \"mirror\" of all the GitHub repositories related to the DHRI curriculum, inside a directory called _preload in the root of the repository. There is a (large) possibility of you running into error message, warnings, etc. in this process. Don't worry too much about them; the ones that will stop the import of the data to the database will stop you in your tracks with a red error message. Everything else is on a \"warning\" level, which means that you can safely continue with the process. All of this is described in the debugging part of the documentation. Once the build command has finished, you can move on to Step 2 below, or read the following section with more detailed information about the build command. More details about build \u00b6 Optional flags \u00b6 The build command can also be called using flags that modify its function and can be combined as you see fit: Flag Description --silent Makes as little output as possible, although still saves all the information in log files (see debugging docs ). --verbose Provides all output possible, which can be overwhelming. Good for debug purposes, not for the faint of heart. To read more detail about each of these commands and their respective required flags, etc., see here . Step 2. Ingest the data from your local files: ingest \u00b6 In the following step, we want to ingest the mirrored copy of all of the data that lives in the GitHub repositories, downloaded and structured in Step 1. We can do so with the ingest shortcut command: $ python manage.py ingest Granted that you do not run into any problems (warnings, error messages, etc.), the database should now be fully populated with the information necessary to get it all up and running . More details about ingest \u00b6 Optional flags \u00b6 The ingest command can also be called using flags that modify its function and can be combined as you see fit: Flag Description --silent Makes as little output as possible, although still saves all the information in log files (see debugging docs ). --verbose Provides all output possible, which can be overwhelming. Good for debug purposes, not for the faint of heart. --reset Removes all the DHRI-related objects in the database and starts a fresh installation. --resetusers Removes all the users in the database and starts a fresh installation from the users.yml file. --force Automatically selects \"yes\" for questions about whether database objects should be updated. \"Forces\" its way. To read more detail about each of these commands and their respective required flags, etc., see here . All of this is described in the debugging part of the documentation.","title":"2. Populating the database"},{"location":"backend/2-populating-the-database/#2-populating-the-database","text":"In order to populate (and update) the content on the DHRI curriculum website using the live data from GitHub, there is a simple two-part process. This app has been built with support to: mirror all the data from the DHRI Curriculum; and ingest the data into the database. The two sections below should cover the process in general, and also provides link to more detailed information if you want to dig deeper into the process. If your database is not yet set up, you will need to first set up the database by running two commands from Django's built-in management script. To make the process smoother, you can comine both on the command line by joining them using && : $ python manage.py makemigrations && python manage.py migrate That should tell you which migrations that will run, and then proceed to run the migrations: No changes detected Operations to perform: Apply all migrations: admin, assessment, auth, contenttypes, feedback, glossary, insight, install, learner, lesson, library, sessions, website, workshop Running migrations: Applying contenttypes.0001_initial... OK Applying auth.0001_initial... OK ...","title":"2. Populating the Database"},{"location":"backend/2-populating-the-database/#step-1-mirror-the-live-data-build","text":"Next, we want to make a mirrored copy of all of the data that lives in the GitHub repositories related to the DHRI curriculum. We can do so with the build shortcut command: $ python manage.py build This will take some time\u2014up to several minutes\u2014so get yourself a cup of coffee. You're doing well! The build command should create a local \"mirror\" of all the GitHub repositories related to the DHRI curriculum, inside a directory called _preload in the root of the repository. There is a (large) possibility of you running into error message, warnings, etc. in this process. Don't worry too much about them; the ones that will stop the import of the data to the database will stop you in your tracks with a red error message. Everything else is on a \"warning\" level, which means that you can safely continue with the process. All of this is described in the debugging part of the documentation. Once the build command has finished, you can move on to Step 2 below, or read the following section with more detailed information about the build command.","title":"Step 1. Mirror the live data: build"},{"location":"backend/2-populating-the-database/#more-details-about-build","text":"","title":"More details about build"},{"location":"backend/2-populating-the-database/#optional-flags","text":"The build command can also be called using flags that modify its function and can be combined as you see fit: Flag Description --silent Makes as little output as possible, although still saves all the information in log files (see debugging docs ). --verbose Provides all output possible, which can be overwhelming. Good for debug purposes, not for the faint of heart. To read more detail about each of these commands and their respective required flags, etc., see here .","title":"Optional flags"},{"location":"backend/2-populating-the-database/#step-2-ingest-the-data-from-your-local-files-ingest","text":"In the following step, we want to ingest the mirrored copy of all of the data that lives in the GitHub repositories, downloaded and structured in Step 1. We can do so with the ingest shortcut command: $ python manage.py ingest Granted that you do not run into any problems (warnings, error messages, etc.), the database should now be fully populated with the information necessary to get it all up and running .","title":"Step 2. Ingest the data from your local files: ingest"},{"location":"backend/2-populating-the-database/#more-details-about-ingest","text":"","title":"More details about ingest"},{"location":"backend/2-populating-the-database/#optional-flags_1","text":"The ingest command can also be called using flags that modify its function and can be combined as you see fit: Flag Description --silent Makes as little output as possible, although still saves all the information in log files (see debugging docs ). --verbose Provides all output possible, which can be overwhelming. Good for debug purposes, not for the faint of heart. --reset Removes all the DHRI-related objects in the database and starts a fresh installation. --resetusers Removes all the users in the database and starts a fresh installation from the users.yml file. --force Automatically selects \"yes\" for questions about whether database objects should be updated. \"Forces\" its way. To read more detail about each of these commands and their respective required flags, etc., see here . All of this is described in the debugging part of the documentation.","title":"Optional flags"},{"location":"backend/3-running-the-instance-locally/","text":"3. Running the instance locally \u00b6 You are now all done. You can run the server by running this command: $ python manage.py runserver This command automatically create a development server for you, and you should be able to now navigate to http://localhost:8000 (or its alias http://127.0.0.1:8000) in any browser of your choice on your computer. Note that your local \"server\" here will not be accessible on the Internet, or on your local network. For the latter, follow the instructions below. If you want to host the site on a public-facing Internet server, you need to deploy the application to a service that provides support for Django applications, such as Reclaim Hosting. Optional: Enable Access on Local Network (Advanced) \u00b6 If you want to make your development server accessible through your local network, instead of running the runserver command from the section above, you can run the custom-made following command: $ python manage.py localserver The result will look similar to that of runserver above, but your address now notably is 0.0.0.0. If your computer's local IP address on your network is 192.168.1.6, for instance, you can now navigate to that IP address from anywhere on your local network to access the curriculum website. Note that localserver is a custom-made script for the backend app here, and not a native Django command. Optional: Adjust Settings \u00b6 The localserver command might give you a warning that notifies you that '*' has been added to ALLOWED_HOSTS . You can let this warning be or choose to rectify the \"problem.\" You will do so by following these two steps: Open the file app/settings.py Find the line that reads: ALLOWED_HOSTS = [] and change it to: ALLOWED_HOSTS = ['*'] Next time you run the localserver script on your command line, the warning will not appear.","title":"3. Running the local instance"},{"location":"backend/3-running-the-instance-locally/#3-running-the-instance-locally","text":"You are now all done. You can run the server by running this command: $ python manage.py runserver This command automatically create a development server for you, and you should be able to now navigate to http://localhost:8000 (or its alias http://127.0.0.1:8000) in any browser of your choice on your computer. Note that your local \"server\" here will not be accessible on the Internet, or on your local network. For the latter, follow the instructions below. If you want to host the site on a public-facing Internet server, you need to deploy the application to a service that provides support for Django applications, such as Reclaim Hosting.","title":"3. Running the instance locally"},{"location":"backend/3-running-the-instance-locally/#optional-enable-access-on-local-network-advanced","text":"If you want to make your development server accessible through your local network, instead of running the runserver command from the section above, you can run the custom-made following command: $ python manage.py localserver The result will look similar to that of runserver above, but your address now notably is 0.0.0.0. If your computer's local IP address on your network is 192.168.1.6, for instance, you can now navigate to that IP address from anywhere on your local network to access the curriculum website. Note that localserver is a custom-made script for the backend app here, and not a native Django command.","title":"Optional: Enable Access on Local Network (Advanced)"},{"location":"backend/3-running-the-instance-locally/#optional-adjust-settings","text":"The localserver command might give you a warning that notifies you that '*' has been added to ALLOWED_HOSTS . You can let this warning be or choose to rectify the \"problem.\" You will do so by following these two steps: Open the file app/settings.py Find the line that reads: ALLOWED_HOSTS = [] and change it to: ALLOWED_HOSTS = ['*'] Next time you run the localserver script on your command line, the warning will not appear.","title":"Optional: Adjust Settings"},{"location":"contributing-content/creating-new-workshop/","text":"Creating a new workshop \u00b6 For all the content files , easily accessible (and for copying and pasting) templates are available here: image.md frontmatter.md lessons.md theory-to-practice.md 1. Navigate to https://github.com/new in order to create a new repository \u00b6 Repository name (suggestion): name it like we\u2019ve named the other workshops, using a shorthand (i.e. not introduction-to-javascript but rather just javascript ) Description : No need for description at this point. If you want to, you can fill it out along this format: @DHRI-Curriculum Session on ______, <Extremely short explanation of the content of the workshop>. Public : Keep the visibility as public. Initialize this repository with : (keep all off) 2. Keep the confirmation page open \u00b6 Keep the confirmation page open. Or you can copy the section ...or push an existing repository from the command line to keep it handy. 3. Open a terminal and navigate to the directory where you want to keep your workshop directory. \u00b6 In my case, I want it inside my Repositories directory in my user folder: $ cd ~/Repositories $ mkdir javascript $ cd javascript ` ## 4. Add a reference to the GitHub repository ```sh $ git init Copy the link from the confirmation page: $ git remote add origin git@github.com:username/workshop-name.git Switch to the main branch: $ git branch -M main 5. Add the localdjango component to the workshop \u00b6 localdjango is a little Python program that automatically generates the README.md and the sections content for each workshop, to make a nice little visible and usable fall-back option, in case the curriculum.dhinstitutes.org site is down, for instance. Or for anyone who comes across our content on GitHub. First add the submodule: $ git submodule add https://github.com/DHRI-Curriculum/localdjango $ git submodule init Just to make sure, run a submodule update command as well: $ git submodule update 6. Add the basic setup of content files for the workshop. \u00b6 I like to work in VS Code, so I fire that up by using: $ code . In the directory, add the content files for the workshop : frontmatter.md , lessons.md , and theory-to-practice.md 7. Add the image for the workshop. \u00b6 In the directory, add the meta files and directories for the workshop : image.md and the directory _django-meta . In the image.md file, add one line on the top of the file, containing the image and the alt-text as follows: ![Header image for the Introduction to JavaScript workshop](https://raw.githubusercontent.com/DHRI-Curriculum/javascript/v2.0/\\_django-meta/header%403x.png) Note that you may need to go in and adjust the link to the image after you\u2019ve added the files to your repository, unless you can guess the githubusercontent.com URI from the pattern above. Inside the _django-meta directory, add the PNG file for the header (which will populate the Curriculum site), called header@3x.png and of the size 610 x 1994px. 8. Time to add the content, starting with frontmatter.md \u00b6 Here, we\u2019ll start with frontmatter.md but you can start with any of the files (see point 9 and 10 below) Note that there is a template for frontmatter.md available to make the following easier to follow. Add header level 1 with the name of the workshop: # Introduction to JavaScript Add header level 2: ## Abstract and underneath it, an abstract for the workshop. Add header level 2: ## Learning Objectives and underneath it a bullet point list ( - _____ ) of each of the learning objectives. (No need to add any other text here, it will be added automatically under the step below where we run localdjango .) Add header level 2: ## Estimated time with content that follows the.format \u201c4 hours\u201d \u2014 no need for punctuation. Add header level 2: ## Prerequisites with content in bullet point form ( - _____ ) that follows any of the following three examples: Each of the bullet points need to contain either \u201crequired\u201d or \u201crecommended\u201d as per the examples below. If you want to add a workshop prerequisite: md [Introduction to the Command Line](https://www.github.com/DHRI-Curriculum/command-line) (required) This workshop makes reference to concepts from the Command Line workshop, and having some knowledge about how to use the command line will be central for anyone who wants to learn about ___________. If you want to add a software installation prerequisite: md [Visual Studio Code](https://github.com/DHRI-Curriculum/install/blob/v2.0/guides/visual-studio-code.md) (recommended) You can use any plain text editor but for our purposes, Visual Studio Code (\"VS Code\") will be used. If you want to add an external link prerequisite: md [Create a GitHub account](https://github.com/join) (required) You need to have a GitHub account for the purposes of this workshop. It is free to sign up via this link. If you want to add a download from the repository as a prerequisite, you need to use an absolute URI to the githubusercontent.com domain: md [Download the workshop dataset](https://raw.githubusercontent.com/DHRI-Curriculum/data-literacies/v2.0/files/moSmall.csv) (required) The dataset, `moSmall.csv`, will be used throughout the challenges in the workshop. To save the file to your local computer, right click on the \"Download the workshop dataset\" link and choose `Save Link As...`. Note: It is important to make sure your file is saved as a `.csv` file. Add a level 2 header: ## Contexts Under the \u201cContexts\u201d header, add a level 3 header: ### Pre-reading suggestions with any recommended preceding suggestions. All reading suggestions should be added as a bulletpoint list, with a hyperlink with a clear explanatory text as its text element. After the reference, you can also add any other explanatory text that you may want. Under the \u201cContexts\u201d header, add a level 3 header: ### Projects that use these skills with any recommended projects to look at, which use the skills detailed in the workshop. All projects should be added as a bulletpoint list, with a hyperlink with a clear explanatory text as its text element. After the reference, you can also add any other explanatory text that you may want. Under the \u201cContexts\u201d header, add a level 3 header: ### Ethical Considerations with any ethical consideration to take into consideration for learners in the workshop. If you want to have a hyperlink, you can do so. Just remember that the hyperlink should have a clear explanatory text as its text element. Under the \u201cContexts\u201d header, add a level 3 header: ### Datasets with any datasets that the learner may want to access for the workshop\u2019s purposes. All datasets should be added as a bulletpoint list, with a hyperlink with a clear explanatory text as its text element. After the reference, you can also add any other explanatory text that you may want. Under the \u201cContexts\u201d header, add a level 3 header: ### Cheat Sheets with any cheat sheets that the learner may want to access for the workshop\u2019s purposes. All cheat sheets should be added as a bulletpoint list, with a hyperlink with a clear explanatory text as its text element. After the reference, you can also add any other explanatory text that you may want. Add a level 2 header: ## Acknowledgements where you add, as content, each of the current and past contributors to the workshop: Each should be added as a bulletpoint list. Name should be the text hyperlinked (if a hyperlink is added) and the name should be preceded by the category of contribution, whether it\u2019s a \u201ccurrent\u201d or a \u201cpast\u201d contribution, followed by a colon. The preference of a hyperlink is to the person\u2019s GitHub profile, but other links are also doable. Some examples: ```md Current author: Di Yoong Past contributing author: Stephen Zweibel Past reviewer: Stefano Morello Past reviewer: Filipa Calado Current editor: Lisa Rhody Current editor: Kalle Westerling ``` 9. Time to add content to lessons.md \u00b6 Note that there is a template for lessons.md available to make the following easier to follow. Add each of the lessons, unnumbered, as a level 1 heading, with any subsequent headers as level 2 headers. ```md # Getting to know your browser What's really nice about JavaScript is that you can get started this very minute. Try it! Go to the View menu in the menubar and under the Developer submenu, choose \"JavaScript Console.\" You should see > which we call a \"prompt\" and you may have encountered in other workshops here, like our Python or Command Line workshops. Playing with the prompt \u00b6 Let's write alert(\"Hello world!\") followed by pressing the Enter button on your keyboard. - For each lesson, add a level 2 section for `## Evaluation`, where you write multiple-choice or open-ended questions on the material in the lesson. - An open-ended question should just be on its own line: md ## Evaluation 1 2 How does JavaScript seem different than Python? What do you think the benefits are of learning foundational skills about any given programming language? ``` A multiple-choice question should be formulated on its own line, followed by a bulletpoint list of options, where the correct one(s) are marked with a star directly following the correct answer(s): ```md ## Evaluation Which of the following sentences is correct: A prompt is a smiley-face. The prompt helps us perform simple one-line commands.* The prompt can run long program sequences. ``` For each lesson, add a level 2 section for ## Keywords Start this section with a single-statement on one line: \u201cDo you remember the glossary terms from this section?\u201d Follow this line with a bulletpoint list of all any terms from the lesson that exist in the glossary repository\u2019s (branch v2.0 ) [ terms ] directory, where a full bulletpoint looks like this: ```md Prompt ``` If your lesson has a challenge, add it as a level 2 section: ## Challenge If you want to use a subheader, you can do by adding a colon after \u201cChallenge\u201d: ## Challenge: A real challenge for a superuser In the following paragraph(s), you can use level 3 headers, if you need to, and any styled markdown. If your challenge has a solution, it should follow the same pattern as the challenge above. A level 2-header, that may or may not have a subheader: ## Solution or ## Solution: We have solved it for you The solution\u2019s following paragraph(s), cal also use level 3 headers, if you need to, and any styled markdown. 10. Time to add content to theory-to-practice.md \u00b6 Note that there is a template for theory-to-practice.md available to make the following easier to follow. Start with a level 1 heading, # Theory to Practice with the following paragraph(s) being a congratulatory message to the learner who has now completed the workshop. It could summarize a bit what the journey has been like, why the skill matters in the world, and where the technology is at right now. Add a level 2 header, ## Suggested Further Readings , with any recommended further readings to look at, which describe the skills detailed in the workshop. All readings should be added as a bulletpoint list, with a hyperlink with a clear explanatory text as its text element. After the reference, you can also add any other explanatory text that you may want. Add a level 2 header, ## Other Tutorials , with any recommended other tutorials the learner may want to look at, which helps them understand the skills detailed in the workshop. All tutorials should be added as a bulletpoint list, with a hyperlink with a clear explanatory text as its text element. After the reference, you can also add any other explanatory text that you may want. Add a level 2 header, ## Projects or Challenges to Try , with any recommended projects or challenges to look at, which use the skills detailed in the workshop. All projects/challenges should be added as a bulletpoint list, with a hyperlink with a clear explanatory text as its text element. After the reference, you can also add any other explanatory text that you may want. Add a level 2 header, Discussion Questions , which provides some open-ended advanced-level question about how the learner\u2019s research projects might benefit from the skill, what its limits are, pitfalls with using this versus other skills, how they could use it in teaching, etc. 11. Run localdjango \u00b6 As it should be initialized in step 5 above, now, after our content is in place (step 7\u201310), we can follow these steps: $ python localdjango/setup.py It will ask you some questions, but for the most part, the answers are automatically generated from your content. Once the script finishes, you should have a README.md file and a sections directory in the repository. 12. Synchronize with git \u00b6 Now we're ready to synchronize the repository with git. You can use VS Code and do it using the application's GitHub extension ...or run the commands on the command line: git add * git commit -m 'Updating from local files.' git push","title":"Build a new workshop"},{"location":"contributing-content/creating-new-workshop/#creating-a-new-workshop","text":"For all the content files , easily accessible (and for copying and pasting) templates are available here: image.md frontmatter.md lessons.md theory-to-practice.md","title":"Creating a new workshop"},{"location":"contributing-content/creating-new-workshop/#1-navigate-to-httpsgithubcomnew-in-order-to-create-a-new-repository","text":"Repository name (suggestion): name it like we\u2019ve named the other workshops, using a shorthand (i.e. not introduction-to-javascript but rather just javascript ) Description : No need for description at this point. If you want to, you can fill it out along this format: @DHRI-Curriculum Session on ______, <Extremely short explanation of the content of the workshop>. Public : Keep the visibility as public. Initialize this repository with : (keep all off)","title":"1. Navigate to https://github.com/new in order to create a new repository"},{"location":"contributing-content/creating-new-workshop/#2-keep-the-confirmation-page-open","text":"Keep the confirmation page open. Or you can copy the section ...or push an existing repository from the command line to keep it handy.","title":"2. Keep the confirmation page open"},{"location":"contributing-content/creating-new-workshop/#3-open-a-terminal-and-navigate-to-the-directory-where-you-want-to-keep-your-workshop-directory","text":"In my case, I want it inside my Repositories directory in my user folder: $ cd ~/Repositories $ mkdir javascript $ cd javascript ` ## 4. Add a reference to the GitHub repository ```sh $ git init Copy the link from the confirmation page: $ git remote add origin git@github.com:username/workshop-name.git Switch to the main branch: $ git branch -M main","title":"3. Open a terminal and navigate to the directory where you want to keep your workshop directory."},{"location":"contributing-content/creating-new-workshop/#5-add-the-localdjango-component-to-the-workshop","text":"localdjango is a little Python program that automatically generates the README.md and the sections content for each workshop, to make a nice little visible and usable fall-back option, in case the curriculum.dhinstitutes.org site is down, for instance. Or for anyone who comes across our content on GitHub. First add the submodule: $ git submodule add https://github.com/DHRI-Curriculum/localdjango $ git submodule init Just to make sure, run a submodule update command as well: $ git submodule update","title":"5. Add the localdjango component to the workshop"},{"location":"contributing-content/creating-new-workshop/#6-add-the-basic-setup-of-content-files-for-the-workshop","text":"I like to work in VS Code, so I fire that up by using: $ code . In the directory, add the content files for the workshop : frontmatter.md , lessons.md , and theory-to-practice.md","title":"6. Add the basic setup of content files for the workshop."},{"location":"contributing-content/creating-new-workshop/#7-add-the-image-for-the-workshop","text":"In the directory, add the meta files and directories for the workshop : image.md and the directory _django-meta . In the image.md file, add one line on the top of the file, containing the image and the alt-text as follows: ![Header image for the Introduction to JavaScript workshop](https://raw.githubusercontent.com/DHRI-Curriculum/javascript/v2.0/\\_django-meta/header%403x.png) Note that you may need to go in and adjust the link to the image after you\u2019ve added the files to your repository, unless you can guess the githubusercontent.com URI from the pattern above. Inside the _django-meta directory, add the PNG file for the header (which will populate the Curriculum site), called header@3x.png and of the size 610 x 1994px.","title":"7. Add the image for the workshop."},{"location":"contributing-content/creating-new-workshop/#8-time-to-add-the-content-starting-with-frontmattermd","text":"Here, we\u2019ll start with frontmatter.md but you can start with any of the files (see point 9 and 10 below) Note that there is a template for frontmatter.md available to make the following easier to follow. Add header level 1 with the name of the workshop: # Introduction to JavaScript Add header level 2: ## Abstract and underneath it, an abstract for the workshop. Add header level 2: ## Learning Objectives and underneath it a bullet point list ( - _____ ) of each of the learning objectives. (No need to add any other text here, it will be added automatically under the step below where we run localdjango .) Add header level 2: ## Estimated time with content that follows the.format \u201c4 hours\u201d \u2014 no need for punctuation. Add header level 2: ## Prerequisites with content in bullet point form ( - _____ ) that follows any of the following three examples: Each of the bullet points need to contain either \u201crequired\u201d or \u201crecommended\u201d as per the examples below. If you want to add a workshop prerequisite: md [Introduction to the Command Line](https://www.github.com/DHRI-Curriculum/command-line) (required) This workshop makes reference to concepts from the Command Line workshop, and having some knowledge about how to use the command line will be central for anyone who wants to learn about ___________. If you want to add a software installation prerequisite: md [Visual Studio Code](https://github.com/DHRI-Curriculum/install/blob/v2.0/guides/visual-studio-code.md) (recommended) You can use any plain text editor but for our purposes, Visual Studio Code (\"VS Code\") will be used. If you want to add an external link prerequisite: md [Create a GitHub account](https://github.com/join) (required) You need to have a GitHub account for the purposes of this workshop. It is free to sign up via this link. If you want to add a download from the repository as a prerequisite, you need to use an absolute URI to the githubusercontent.com domain: md [Download the workshop dataset](https://raw.githubusercontent.com/DHRI-Curriculum/data-literacies/v2.0/files/moSmall.csv) (required) The dataset, `moSmall.csv`, will be used throughout the challenges in the workshop. To save the file to your local computer, right click on the \"Download the workshop dataset\" link and choose `Save Link As...`. Note: It is important to make sure your file is saved as a `.csv` file. Add a level 2 header: ## Contexts Under the \u201cContexts\u201d header, add a level 3 header: ### Pre-reading suggestions with any recommended preceding suggestions. All reading suggestions should be added as a bulletpoint list, with a hyperlink with a clear explanatory text as its text element. After the reference, you can also add any other explanatory text that you may want. Under the \u201cContexts\u201d header, add a level 3 header: ### Projects that use these skills with any recommended projects to look at, which use the skills detailed in the workshop. All projects should be added as a bulletpoint list, with a hyperlink with a clear explanatory text as its text element. After the reference, you can also add any other explanatory text that you may want. Under the \u201cContexts\u201d header, add a level 3 header: ### Ethical Considerations with any ethical consideration to take into consideration for learners in the workshop. If you want to have a hyperlink, you can do so. Just remember that the hyperlink should have a clear explanatory text as its text element. Under the \u201cContexts\u201d header, add a level 3 header: ### Datasets with any datasets that the learner may want to access for the workshop\u2019s purposes. All datasets should be added as a bulletpoint list, with a hyperlink with a clear explanatory text as its text element. After the reference, you can also add any other explanatory text that you may want. Under the \u201cContexts\u201d header, add a level 3 header: ### Cheat Sheets with any cheat sheets that the learner may want to access for the workshop\u2019s purposes. All cheat sheets should be added as a bulletpoint list, with a hyperlink with a clear explanatory text as its text element. After the reference, you can also add any other explanatory text that you may want. Add a level 2 header: ## Acknowledgements where you add, as content, each of the current and past contributors to the workshop: Each should be added as a bulletpoint list. Name should be the text hyperlinked (if a hyperlink is added) and the name should be preceded by the category of contribution, whether it\u2019s a \u201ccurrent\u201d or a \u201cpast\u201d contribution, followed by a colon. The preference of a hyperlink is to the person\u2019s GitHub profile, but other links are also doable. Some examples: ```md Current author: Di Yoong Past contributing author: Stephen Zweibel Past reviewer: Stefano Morello Past reviewer: Filipa Calado Current editor: Lisa Rhody Current editor: Kalle Westerling ```","title":"8. Time to add the content, starting with frontmatter.md"},{"location":"contributing-content/creating-new-workshop/#9-time-to-add-content-to-lessonsmd","text":"Note that there is a template for lessons.md available to make the following easier to follow. Add each of the lessons, unnumbered, as a level 1 heading, with any subsequent headers as level 2 headers. ```md # Getting to know your browser What's really nice about JavaScript is that you can get started this very minute. Try it! Go to the View menu in the menubar and under the Developer submenu, choose \"JavaScript Console.\" You should see > which we call a \"prompt\" and you may have encountered in other workshops here, like our Python or Command Line workshops.","title":"9. Time to add content to lessons.md"},{"location":"contributing-content/creating-new-workshop/#playing-with-the-prompt","text":"Let's write alert(\"Hello world!\") followed by pressing the Enter button on your keyboard. - For each lesson, add a level 2 section for `## Evaluation`, where you write multiple-choice or open-ended questions on the material in the lesson. - An open-ended question should just be on its own line: md ## Evaluation 1 2 How does JavaScript seem different than Python? What do you think the benefits are of learning foundational skills about any given programming language? ``` A multiple-choice question should be formulated on its own line, followed by a bulletpoint list of options, where the correct one(s) are marked with a star directly following the correct answer(s): ```md ## Evaluation Which of the following sentences is correct: A prompt is a smiley-face. The prompt helps us perform simple one-line commands.* The prompt can run long program sequences. ``` For each lesson, add a level 2 section for ## Keywords Start this section with a single-statement on one line: \u201cDo you remember the glossary terms from this section?\u201d Follow this line with a bulletpoint list of all any terms from the lesson that exist in the glossary repository\u2019s (branch v2.0 ) [ terms ] directory, where a full bulletpoint looks like this: ```md Prompt ``` If your lesson has a challenge, add it as a level 2 section: ## Challenge If you want to use a subheader, you can do by adding a colon after \u201cChallenge\u201d: ## Challenge: A real challenge for a superuser In the following paragraph(s), you can use level 3 headers, if you need to, and any styled markdown. If your challenge has a solution, it should follow the same pattern as the challenge above. A level 2-header, that may or may not have a subheader: ## Solution or ## Solution: We have solved it for you The solution\u2019s following paragraph(s), cal also use level 3 headers, if you need to, and any styled markdown.","title":"Playing with the prompt"},{"location":"contributing-content/creating-new-workshop/#10-time-to-add-content-to-theory-to-practicemd","text":"Note that there is a template for theory-to-practice.md available to make the following easier to follow. Start with a level 1 heading, # Theory to Practice with the following paragraph(s) being a congratulatory message to the learner who has now completed the workshop. It could summarize a bit what the journey has been like, why the skill matters in the world, and where the technology is at right now. Add a level 2 header, ## Suggested Further Readings , with any recommended further readings to look at, which describe the skills detailed in the workshop. All readings should be added as a bulletpoint list, with a hyperlink with a clear explanatory text as its text element. After the reference, you can also add any other explanatory text that you may want. Add a level 2 header, ## Other Tutorials , with any recommended other tutorials the learner may want to look at, which helps them understand the skills detailed in the workshop. All tutorials should be added as a bulletpoint list, with a hyperlink with a clear explanatory text as its text element. After the reference, you can also add any other explanatory text that you may want. Add a level 2 header, ## Projects or Challenges to Try , with any recommended projects or challenges to look at, which use the skills detailed in the workshop. All projects/challenges should be added as a bulletpoint list, with a hyperlink with a clear explanatory text as its text element. After the reference, you can also add any other explanatory text that you may want. Add a level 2 header, Discussion Questions , which provides some open-ended advanced-level question about how the learner\u2019s research projects might benefit from the skill, what its limits are, pitfalls with using this versus other skills, how they could use it in teaching, etc.","title":"10. Time to add content to theory-to-practice.md"},{"location":"contributing-content/creating-new-workshop/#11-run-localdjango","text":"As it should be initialized in step 5 above, now, after our content is in place (step 7\u201310), we can follow these steps: $ python localdjango/setup.py It will ask you some questions, but for the most part, the answers are automatically generated from your content. Once the script finishes, you should have a README.md file and a sections directory in the repository.","title":"11. Run localdjango"},{"location":"contributing-content/creating-new-workshop/#12-synchronize-with-git","text":"Now we're ready to synchronize the repository with git. You can use VS Code and do it using the application's GitHub extension ...or run the commands on the command line: git add * git commit -m 'Updating from local files.' git push","title":"12. Synchronize with git"},{"location":"contributing-content/file-templates/frontmatter/","text":"Template for frontmatter.md \u00b6 # Name of Workshop ## Abstract Eiusmod sunt reprehenderit ex ullamco sunt incididunt voluptate elit pariatur esse officia et ex ipsum. Sint id elit labore amet eu laborum. Excepteur voluptate incididunt ex anim et laboris. Magna Lorem non ex sint enim officia ad velit quis aute fugiat velit ad eiusmod. Ex commodo ad deserunt excepteur et duis. Do et pariatur excepteur cillum cillum Lorem laborum id. Dolor laboris officia consectetur esse proident. ## Learning Objectives - active verb starts the learning objective. - active verb starts the learning objective. - active verb starts the learning objective. - active verb starts the learning objective. ## Estimated time 4 hours. ## Prerequisites - [Workshop title](https://www.github.com/DHRI-Curriculum/workshop) (required/recommended -- choose one) Descriptive text of why this is a prerequisite. - [Software name](https://www.github.com/DHRI-Curriculum/install/blob/v2.0/guides/file-name-for-install-instructions.md) (required/recommended -- choose one) Descriptive text of why this is a prerequisite. - [External link's name](https://any-external-link.com) (required/recommended -- choose one) Descriptive text of why this is a prerequisite. - [Download the workshop dataset](https://raw.githubusercontent.com/DHRI-Curriculum/workshop/v2.0/folder/file.zip) (required/recommended -- choose one) Descriptive text of why this is a prerequisite. ## Contexts ### Pre-reading suggestions - Author, [Reading Title](https://reading.com) Explanatory text here. ### Projects that use these skills - [Project name](https://project.com) Explanatory text here. ### Ethical considerations - Ethical consideration, number one. Does not need to have a link. - Ethical consideration, number one. This one, however, does have a [descriptive text element](https://ethical-link.com) for its link. ### Datasets - [Dataset name](https://dataset.com) Explanatory text here. ### Cheat sheets - [Cheat sheet name](https://cheat-sheet-link.com) Explanatory text here. ## Acknowledgements - Current author: [Name](https://github.com/username-on-github) - Past contributing author: [Name](https://github.com/username-on-github) - Past reviewer: [Name](https://github.com/username-on-github) - Current editor: [Name](https://github.com/username-on-github) - Current editor: [Name](https://github.com/username-on-github)","title":"frontmatter.md"},{"location":"contributing-content/file-templates/frontmatter/#template-for-frontmattermd","text":"# Name of Workshop ## Abstract Eiusmod sunt reprehenderit ex ullamco sunt incididunt voluptate elit pariatur esse officia et ex ipsum. Sint id elit labore amet eu laborum. Excepteur voluptate incididunt ex anim et laboris. Magna Lorem non ex sint enim officia ad velit quis aute fugiat velit ad eiusmod. Ex commodo ad deserunt excepteur et duis. Do et pariatur excepteur cillum cillum Lorem laborum id. Dolor laboris officia consectetur esse proident. ## Learning Objectives - active verb starts the learning objective. - active verb starts the learning objective. - active verb starts the learning objective. - active verb starts the learning objective. ## Estimated time 4 hours. ## Prerequisites - [Workshop title](https://www.github.com/DHRI-Curriculum/workshop) (required/recommended -- choose one) Descriptive text of why this is a prerequisite. - [Software name](https://www.github.com/DHRI-Curriculum/install/blob/v2.0/guides/file-name-for-install-instructions.md) (required/recommended -- choose one) Descriptive text of why this is a prerequisite. - [External link's name](https://any-external-link.com) (required/recommended -- choose one) Descriptive text of why this is a prerequisite. - [Download the workshop dataset](https://raw.githubusercontent.com/DHRI-Curriculum/workshop/v2.0/folder/file.zip) (required/recommended -- choose one) Descriptive text of why this is a prerequisite. ## Contexts ### Pre-reading suggestions - Author, [Reading Title](https://reading.com) Explanatory text here. ### Projects that use these skills - [Project name](https://project.com) Explanatory text here. ### Ethical considerations - Ethical consideration, number one. Does not need to have a link. - Ethical consideration, number one. This one, however, does have a [descriptive text element](https://ethical-link.com) for its link. ### Datasets - [Dataset name](https://dataset.com) Explanatory text here. ### Cheat sheets - [Cheat sheet name](https://cheat-sheet-link.com) Explanatory text here. ## Acknowledgements - Current author: [Name](https://github.com/username-on-github) - Past contributing author: [Name](https://github.com/username-on-github) - Past reviewer: [Name](https://github.com/username-on-github) - Current editor: [Name](https://github.com/username-on-github) - Current editor: [Name](https://github.com/username-on-github)","title":"Template for frontmatter.md"},{"location":"contributing-content/file-templates/image/","text":"Template for image.md \u00b6 ![Header image for the NAME OF WORKSHOP workshop](https://raw.githubusercontent.com/USER/REPOSITORY/BRANCH/\\_django-meta/header%403x.png)","title":"image.md"},{"location":"contributing-content/file-templates/image/#template-for-imagemd","text":"![Header image for the NAME OF WORKSHOP workshop](https://raw.githubusercontent.com/USER/REPOSITORY/BRANCH/\\_django-meta/header%403x.png)","title":"Template for image.md"},{"location":"contributing-content/file-templates/lessons/","text":"Template for lessons.md \u00b6 # Lesson number one: They should not be numbered. Dolor minim nostrud ipsum dolor minim nisi minim duis sint sint consectetur proident quis velit. Elit duis eu laborum veniam quis magna deserunt amet est Lorem. Proident aliqua in velit consequat veniam irure reprehenderit incididunt do laborum tempor qui. Commodo minim est dolor do magna ullamco magna dolore ipsum culpa laborum voluptate esse elit. Consequat ullamco sunt ut laborum anim in consequat consectetur deserunt qui dolore proident. Ad occaecat aliquip incididunt dolore laboris et adipisicing occaecat exercitation laborum fugiat enim ea excepteur. Excepteur ea dolore consectetur ea eiusmod enim. Aliqua dolor magna labore tempor exercitation ut ut et Lorem aute do officia anim. Ea dolor incididunt laborum tempor laborum eu. Laboris consectetur laborum magna Lorem veniam mollit consectetur officia. Lorem aliquip id labore excepteur nisi id ea elit aute. Fugiat proident esse amet mollit dolor mollit tempor occaecat. Minim do culpa aute cupidatat. Pariatur cillum minim et sint et nisi mollit pariatur qui. ## You can have subheaders of level 2 Voluptate sunt non sint deserunt eiusmod voluptate eiusmod laborum qui consectetur dolor ad. Lorem adipisicing fugiat ullamco pariatur id proident fugiat elit eiusmod commodo nisi sit. Dolor labore aute dolor labore laborum labore veniam quis incididunt nisi qui sunt. Pariatur Lorem aute dolor dolore laboris nisi eu exercitation qui. Reprehenderit non enim ullamco fugiat nostrud minim commodo nisi officia duis aliquip elit. ## Evaluation An open-ended question should just be a one-liner like this, ending with a question mark? A multi-choice question could be, for instance: Which of the following sentences is correct: - Wrong alternative number one. - Correct alternative number one.* - Wrong alternative number two. - Correct alternative number two.* - Correct alternative number three.* ## Keywords Do you remember the glossary terms from this section? - [Keyword](https://github.com/DHRI-Curriculum/glossary/blob/v2.0/terms/insert-keyword-here.md) ## Challenge: A Challenge can also have its own header on the page, if you add it like this (you can also leave it as \"## Challenge\") If your lesson has a challenge, add it here. You can use level 3 headers, if you need to, and any styled markdown. ## Solution: This is how you add an optional header for your solution (you can also leave it as \"## Solution\") If your challenge has a solution, it should follow the same pattern as the challenge above. The solution\u2019s following paragraph(s), can also use level 3 headers, if you need to, and any styled markdown. # Lesson number two: They should not be numbered. ...and so one... # Lesson number three: They should not be numbered. ... # Lesson number four: They should not be numbered. ...","title":"lessons.md"},{"location":"contributing-content/file-templates/lessons/#template-for-lessonsmd","text":"# Lesson number one: They should not be numbered. Dolor minim nostrud ipsum dolor minim nisi minim duis sint sint consectetur proident quis velit. Elit duis eu laborum veniam quis magna deserunt amet est Lorem. Proident aliqua in velit consequat veniam irure reprehenderit incididunt do laborum tempor qui. Commodo minim est dolor do magna ullamco magna dolore ipsum culpa laborum voluptate esse elit. Consequat ullamco sunt ut laborum anim in consequat consectetur deserunt qui dolore proident. Ad occaecat aliquip incididunt dolore laboris et adipisicing occaecat exercitation laborum fugiat enim ea excepteur. Excepteur ea dolore consectetur ea eiusmod enim. Aliqua dolor magna labore tempor exercitation ut ut et Lorem aute do officia anim. Ea dolor incididunt laborum tempor laborum eu. Laboris consectetur laborum magna Lorem veniam mollit consectetur officia. Lorem aliquip id labore excepteur nisi id ea elit aute. Fugiat proident esse amet mollit dolor mollit tempor occaecat. Minim do culpa aute cupidatat. Pariatur cillum minim et sint et nisi mollit pariatur qui. ## You can have subheaders of level 2 Voluptate sunt non sint deserunt eiusmod voluptate eiusmod laborum qui consectetur dolor ad. Lorem adipisicing fugiat ullamco pariatur id proident fugiat elit eiusmod commodo nisi sit. Dolor labore aute dolor labore laborum labore veniam quis incididunt nisi qui sunt. Pariatur Lorem aute dolor dolore laboris nisi eu exercitation qui. Reprehenderit non enim ullamco fugiat nostrud minim commodo nisi officia duis aliquip elit. ## Evaluation An open-ended question should just be a one-liner like this, ending with a question mark? A multi-choice question could be, for instance: Which of the following sentences is correct: - Wrong alternative number one. - Correct alternative number one.* - Wrong alternative number two. - Correct alternative number two.* - Correct alternative number three.* ## Keywords Do you remember the glossary terms from this section? - [Keyword](https://github.com/DHRI-Curriculum/glossary/blob/v2.0/terms/insert-keyword-here.md) ## Challenge: A Challenge can also have its own header on the page, if you add it like this (you can also leave it as \"## Challenge\") If your lesson has a challenge, add it here. You can use level 3 headers, if you need to, and any styled markdown. ## Solution: This is how you add an optional header for your solution (you can also leave it as \"## Solution\") If your challenge has a solution, it should follow the same pattern as the challenge above. The solution\u2019s following paragraph(s), can also use level 3 headers, if you need to, and any styled markdown. # Lesson number two: They should not be numbered. ...and so one... # Lesson number three: They should not be numbered. ... # Lesson number four: They should not be numbered. ...","title":"Template for lessons.md"},{"location":"contributing-content/file-templates/term/","text":"Template for term.md \u00b6 # <term> Add the explanation of the term in this first paragraph, and then use as many paragraphs as you need. ## Readings - Author, [Reading Title](https://reading.com) Explanatory text here about why it's a good reading to embark on to learn more about the term. ## Tutorials - [Tutorial title](https://reading.com) Explanatory text here about why we think this is a good tutorial to take on in order to better understand the term. ## Cheat sheets - [Cheat sheet name](https://cheat-sheet-link.com) Explanatory text here.","title":"term.md"},{"location":"contributing-content/file-templates/term/#template-for-termmd","text":"# <term> Add the explanation of the term in this first paragraph, and then use as many paragraphs as you need. ## Readings - Author, [Reading Title](https://reading.com) Explanatory text here about why it's a good reading to embark on to learn more about the term. ## Tutorials - [Tutorial title](https://reading.com) Explanatory text here about why we think this is a good tutorial to take on in order to better understand the term. ## Cheat sheets - [Cheat sheet name](https://cheat-sheet-link.com) Explanatory text here.","title":"Template for term.md"},{"location":"contributing-content/file-templates/theory-to-practice/","text":"Template for theory-to-practice.md \u00b6 # Theory to Practice Congratulatory paragraph here to the learner who has now completed the workshop. It could summarize a bit what the journey has been like, why the skill matters in the world, and where the technology is at right now. ## Suggested Further Readings - Author, [Reading Title](https://reading.com) Explanatory text here about why it's a good reading to embark on after the workshop. ## Other Tutorials - [Tutorial title](https://reading.com) Explanatory text here about why we think this is a good tutorial to take on after our workshop. ## Projects or Challenges to Tru - [Project/challenge name](https://project.com) Explanatory text here about why it is a good challenge. ## Discussion Questions - some open-ended advanced-level question about - how the learner\u2019s research projects might benefit - from the skill, what its limits are, pitfalls with - using this versus other skills, how they could use - it in teaching, etc.","title":"theory-to-practice.md"},{"location":"contributing-content/file-templates/theory-to-practice/#template-for-theory-to-practicemd","text":"# Theory to Practice Congratulatory paragraph here to the learner who has now completed the workshop. It could summarize a bit what the journey has been like, why the skill matters in the world, and where the technology is at right now. ## Suggested Further Readings - Author, [Reading Title](https://reading.com) Explanatory text here about why it's a good reading to embark on after the workshop. ## Other Tutorials - [Tutorial title](https://reading.com) Explanatory text here about why we think this is a good tutorial to take on after our workshop. ## Projects or Challenges to Tru - [Project/challenge name](https://project.com) Explanatory text here about why it is a good challenge. ## Discussion Questions - some open-ended advanced-level question about - how the learner\u2019s research projects might benefit - from the skill, what its limits are, pitfalls with - using this versus other skills, how they could use - it in teaching, etc.","title":"Template for theory-to-practice.md"},{"location":"contributing-content/style-guide/branches/branch-names/","text":"Branch names \u00b6 Branch names of workshops and other content-oriented repositories (in install , glossary , etc.) should generally follow the convention v1.0 or v2.0 when they are in production. When you're creating \"editing branches\" where you will commit your suggested edits to a content-oriented repository, they should follow the convention <desired upstream, like v2.0>-<your-username>-edits (for instance, v2.0-kallewesterling-edits ).","title":"Branch names"},{"location":"contributing-content/style-guide/branches/branch-names/#branch-names","text":"Branch names of workshops and other content-oriented repositories (in install , glossary , etc.) should generally follow the convention v1.0 or v2.0 when they are in production. When you're creating \"editing branches\" where you will commit your suggested edits to a content-oriented repository, they should follow the convention <desired upstream, like v2.0>-<your-username>-edits (for instance, v2.0-kallewesterling-edits ).","title":"Branch names"},{"location":"contributing-content/terms/commit/","text":"Commit New Term to GitHub \u00b6 Step 1. Commit your changes and synchronize with GitHub. \u00b6 Press the version control button in your menubar on the left (alternatively, you can choose SCM from the View menu). Next, hover over your newly added term file: Then, press the + button to add the files to your commits. Once you press the + button, the file should move from the Changes section to the Staged Changes section. Once all your files with your terms are in the Staged Changes section, you are ready to move on. In the Message box above the list, type an instructive message, something along the lines of Adding terms: <Term 1>, <Term 2>, <Term 3> Then, press the checkmark above the message box ( \u2713 ). Alternatively, you can press command enter . Next, you want to synchronize your commit(s) with GitHub, by pressing the icon next to your branch name. If it's your first time, you should press the little cloud with an arrow into it. Otherwise, you should press two arrows forming a circle: Step 2. Add a pull request to the v2.0 branch \u00b6 Next, we will want to add a pull request to the v2.0 branch, the current production branch for the DHRI Curriculum's glossary. Navigate to GitHub's Compare changes page. Ensure that the base branch (the one you want to merge your changes into ) is selected as v2.0 : On the compare side, you will then want to choose your own branch in the popup menu: You should see a large, green button that says \"Create pull request\" and a green checkmark that says that you're able to merge: Press the \"Create pull request\" button, and fill out the form that pops up with some important information. Note: If you filled out the commit above with information about all the terms you added, that should already be the title of your request and this should be an easy step. Once you're done, press the green \"Create pull request\" button at the bottom of the form. You're done. Once someone gets around to it, your changes might be merged into the repository.","title":"Commit new term to GitHub"},{"location":"contributing-content/terms/commit/#commit-new-term-to-github","text":"","title":"Commit New Term to GitHub"},{"location":"contributing-content/terms/commit/#step-1-commit-your-changes-and-synchronize-with-github","text":"Press the version control button in your menubar on the left (alternatively, you can choose SCM from the View menu). Next, hover over your newly added term file: Then, press the + button to add the files to your commits. Once you press the + button, the file should move from the Changes section to the Staged Changes section. Once all your files with your terms are in the Staged Changes section, you are ready to move on. In the Message box above the list, type an instructive message, something along the lines of Adding terms: <Term 1>, <Term 2>, <Term 3> Then, press the checkmark above the message box ( \u2713 ). Alternatively, you can press command enter . Next, you want to synchronize your commit(s) with GitHub, by pressing the icon next to your branch name. If it's your first time, you should press the little cloud with an arrow into it. Otherwise, you should press two arrows forming a circle:","title":"Step 1. Commit your changes and synchronize with GitHub."},{"location":"contributing-content/terms/commit/#step-2-add-a-pull-request-to-the-v20-branch","text":"Next, we will want to add a pull request to the v2.0 branch, the current production branch for the DHRI Curriculum's glossary. Navigate to GitHub's Compare changes page. Ensure that the base branch (the one you want to merge your changes into ) is selected as v2.0 : On the compare side, you will then want to choose your own branch in the popup menu: You should see a large, green button that says \"Create pull request\" and a green checkmark that says that you're able to merge: Press the \"Create pull request\" button, and fill out the form that pops up with some important information. Note: If you filled out the commit above with information about all the terms you added, that should already be the title of your request and this should be an easy step. Once you're done, press the green \"Create pull request\" button at the bottom of the form. You're done. Once someone gets around to it, your changes might be merged into the repository.","title":"Step 2. Add a pull request to the v2.0 branch"},{"location":"contributing-content/terms/new/","text":"Build a new term \u00b6 In this tutorial, we will use VS Code but if you prefer, you can use any other editor or even command line tools. Step 1. Clone the repository. \u00b6 Bring up the Command Palette ( command shift P ) Type git clone When asked to provide repository URL, paste https://github.com/DHRI-Curriculum/glossary/ into the box. VS Code will ask you where to save your local clone of the repository. Choose wherever you would like to have it. When asked \"Would you like to open the cloned repository?\", press \"Open in New Window\" (to ensure no conflict with any other windows you may have open). Step 2. Create your own branch. \u00b6 In the lower-left corner of the VS Code's window, click on the branch name that you are currently working on (likely \"main\"): In the menu that pops up, select \"Create new branch from...\": Next, provide a branch name for your new branch (following our style guide , choose something along the lines of v2.0-<your-username>-suggested-terms ). Then press enter to create the new branch: You should then be asked to \"Select a ref to create\" in relation to your branch. In this example above, since our desired upstream is the v2.0 branch, you will select origin/v2.0 : You should now be on your own branch of this repository. You can verify that you're on the correct branch by checking your lower-left corner that should have your branch name instead of the formerly active branch. Step 3. Add the term(s) you believe should be added to the terms folder \u00b6 Before you start to add content to your editing branch, make sure you're adding terms to the correct folder, terms inside the repository. The term should be in its own, separate <term>.md file. Keep the filename lowercase and replace spaces with '-'. Note that there is a template for term.md available to make the following easier to follow. Add the term as the first header in the file ( # <term> ) In the first paragraph after the first header, add the explanation of the term. (Optional) Add a section ## Readings where you add a bulletpoint for each reading you think is valuable to grasp the term that you want to add to the glossary. (Optional) Add a section ## Tutorials where you add a bulletpoint for each tutorial you think is valuable to grasp the term that you want to add to the glossary. (Optional) Add a section ## Cheat sheets where you add a bulletpoint for each cheat sheet you think is good for the learner to know about to be able to understand the term. Once you are done with all of the terms you would like to add , your VS Code should look something like this: Now you're ready to move on to the next step, committing your changes to GitHub .","title":"Build a new term"},{"location":"contributing-content/terms/new/#build-a-new-term","text":"In this tutorial, we will use VS Code but if you prefer, you can use any other editor or even command line tools.","title":"Build a new term"},{"location":"contributing-content/terms/new/#step-1-clone-the-repository","text":"Bring up the Command Palette ( command shift P ) Type git clone When asked to provide repository URL, paste https://github.com/DHRI-Curriculum/glossary/ into the box. VS Code will ask you where to save your local clone of the repository. Choose wherever you would like to have it. When asked \"Would you like to open the cloned repository?\", press \"Open in New Window\" (to ensure no conflict with any other windows you may have open).","title":"Step 1. Clone the repository."},{"location":"contributing-content/terms/new/#step-2-create-your-own-branch","text":"In the lower-left corner of the VS Code's window, click on the branch name that you are currently working on (likely \"main\"): In the menu that pops up, select \"Create new branch from...\": Next, provide a branch name for your new branch (following our style guide , choose something along the lines of v2.0-<your-username>-suggested-terms ). Then press enter to create the new branch: You should then be asked to \"Select a ref to create\" in relation to your branch. In this example above, since our desired upstream is the v2.0 branch, you will select origin/v2.0 : You should now be on your own branch of this repository. You can verify that you're on the correct branch by checking your lower-left corner that should have your branch name instead of the formerly active branch.","title":"Step 2. Create your own branch."},{"location":"contributing-content/terms/new/#step-3-add-the-terms-you-believe-should-be-added-to-the-terms-folder","text":"Before you start to add content to your editing branch, make sure you're adding terms to the correct folder, terms inside the repository. The term should be in its own, separate <term>.md file. Keep the filename lowercase and replace spaces with '-'. Note that there is a template for term.md available to make the following easier to follow. Add the term as the first header in the file ( # <term> ) In the first paragraph after the first header, add the explanation of the term. (Optional) Add a section ## Readings where you add a bulletpoint for each reading you think is valuable to grasp the term that you want to add to the glossary. (Optional) Add a section ## Tutorials where you add a bulletpoint for each tutorial you think is valuable to grasp the term that you want to add to the glossary. (Optional) Add a section ## Cheat sheets where you add a bulletpoint for each cheat sheet you think is good for the learner to know about to be able to understand the term. Once you are done with all of the terms you would like to add , your VS Code should look something like this: Now you're ready to move on to the next step, committing your changes to GitHub .","title":"Step 3. Add the term(s) you believe should be added to the terms folder"},{"location":"debugging/","text":"Debugging the application \u00b6 XXXX","title":"Getting started with debug"},{"location":"debugging/#debugging-the-application","text":"XXXX","title":"Debugging the application"},{"location":"deployment/reclaim-shared-hosting/pull/","text":"Pull latest updates into production \u00b6 In a Terminal: Open a SSH tunnel to dhinstitutes.org sh $ ssh dhinstit@dhinstitutes.org Activate the environment: sh $ source virtualenv/curriculum.dhinstitutes.org/3.7/bin/activate Navigate into the directory: sh $ cd curriculum.dhinstitutes.org Pull: sh $ git pull Collect all the static files in the static.dhinstitutes.org server: sh $ python manage.py collectstatic You will be asked whether you want to overwrite existing files. The answer is yes . Afterwards, you may want to restart the Django app to make sure changes are done. Optional: Pulling from other development branch \u00b6 The example above will always pull from the default branch. If you want to test run a new/different/updated development branch (for instance, if you're working on an issue and want to see it work in production), you would, after step 4 above, checkout a specific brand (in the example below, v1-dev ): $ git checkout --track origin/v1-dev","title":"1. Pulling latest commit"},{"location":"deployment/reclaim-shared-hosting/pull/#pull-latest-updates-into-production","text":"In a Terminal: Open a SSH tunnel to dhinstitutes.org sh $ ssh dhinstit@dhinstitutes.org Activate the environment: sh $ source virtualenv/curriculum.dhinstitutes.org/3.7/bin/activate Navigate into the directory: sh $ cd curriculum.dhinstitutes.org Pull: sh $ git pull Collect all the static files in the static.dhinstitutes.org server: sh $ python manage.py collectstatic You will be asked whether you want to overwrite existing files. The answer is yes . Afterwards, you may want to restart the Django app to make sure changes are done.","title":"Pull latest updates into production"},{"location":"deployment/reclaim-shared-hosting/pull/#optional-pulling-from-other-development-branch","text":"The example above will always pull from the default branch. If you want to test run a new/different/updated development branch (for instance, if you're working on an issue and want to see it work in production), you would, after step 4 above, checkout a specific brand (in the example below, v1-dev ): $ git checkout --track origin/v1-dev","title":"Optional: Pulling from other development branch"},{"location":"deployment/reclaim-shared-hosting/restart/","text":"Restarting Reclaimed Shared Hosting \u00b6 Navigate to the Python Web Application Press the restart button (\ud83d\udd04). Wait for a moment.","title":"2. Restarting hosting"},{"location":"deployment/reclaim-shared-hosting/restart/#restarting-reclaimed-shared-hosting","text":"Navigate to the Python Web Application Press the restart button (\ud83d\udd04). Wait for a moment.","title":"Restarting Reclaimed Shared Hosting"},{"location":"editing-content/","text":"Editing content \u00b6 This is where we will have information about the duties of the \"editor\" in the editorial workflow\u2014the one who needs to make sure that content gets forked into DHRI-Curriculum, and edited in the correct way. Technically these are all different instructions but we're combining it all here...","title":"Getting started"},{"location":"editing-content/#editing-content","text":"This is where we will have information about the duties of the \"editor\" in the editorial workflow\u2014the one who needs to make sure that content gets forked into DHRI-Curriculum, and edited in the correct way. Technically these are all different instructions but we're combining it all here...","title":"Editing content"},{"location":"editing-content/forking-workshop/","text":"Forking the workshop to the DHRI platform \u00b6 Assuming that you\u2019ve build the workshop in your local user (in my case, under the kallewesterling GitHub user), we now want to clone the workshop to the DHRI-Curriculum \u201cuser\u201d on GitHub. This must be done by someone with fork access to DHRI-Curriculum. Navigate to the new workshop on Github (say, kallewesterling/javascript ) Press the \u201cFork\u201d button in the upper-right-hand corner. A dialog should appear where you have the option of clicking \u201cDHRI-Curriculum.\u201d (If you do not, you don\u2019t have fork access to DHRI-Curriculum on GitHub, and need to ask Lisa or Kalle for access.) Press DHRI-Curriculum, and that should be it. If you need to remove the fork, you can press the \u201cSettings\u201d tab, scroll down to the \u201cDanger Zone,\u201d and press \u201cDelete this repository.\u201d Since the repository was created not as part of the DHRI-Curriculum , this process won\u2019t remove the \u201coriginal\u201d repository\u2014only the fork under the DHRI-Curriculum .","title":"Forking a workshop into our content"},{"location":"editing-content/forking-workshop/#forking-the-workshop-to-the-dhri-platform","text":"Assuming that you\u2019ve build the workshop in your local user (in my case, under the kallewesterling GitHub user), we now want to clone the workshop to the DHRI-Curriculum \u201cuser\u201d on GitHub. This must be done by someone with fork access to DHRI-Curriculum. Navigate to the new workshop on Github (say, kallewesterling/javascript ) Press the \u201cFork\u201d button in the upper-right-hand corner. A dialog should appear where you have the option of clicking \u201cDHRI-Curriculum.\u201d (If you do not, you don\u2019t have fork access to DHRI-Curriculum on GitHub, and need to ask Lisa or Kalle for access.) Press DHRI-Curriculum, and that should be it. If you need to remove the fork, you can press the \u201cSettings\u201d tab, scroll down to the \u201cDanger Zone,\u201d and press \u201cDelete this repository.\u201d Since the repository was created not as part of the DHRI-Curriculum , this process won\u2019t remove the \u201coriginal\u201d repository\u2014only the fork under the DHRI-Curriculum .","title":"Forking the workshop to the DHRI platform"},{"location":"editing-content/merging-new-terms/","text":"Merging new terms into the glossary repository \u00b6 When there's a pull request waiting in the glossary repository (instructions are here ), what do you do as an editor?","title":"Merging new terms into the glossary"},{"location":"editing-content/merging-new-terms/#merging-new-terms-into-the-glossary-repository","text":"When there's a pull request waiting in the glossary repository (instructions are here ), what do you do as an editor?","title":"Merging new terms into the glossary repository"},{"location":"settings/add-new-user/","text":"Adding a new user \u00b6 Collecting information \u00b6 For each user, you will need to collect some information: First name(s) Last name(s) Username Pronouns the person uses Password (this can always be changed) Bio Image in JPEG or PNG format (see below) Any professional or personal websites to add to the profile Filling out the YAML file \u00b6 Once you have all the information collected, you can start working in the file backend/setup/users.yml where you want to add the collected information above, in a format that follows this template: - first_name: <First name> last_name: <Last name(s)> pronouns: <Which pronouns the person uses> username: usernamewithoutspacesorothercharacters password: <clear-text password here - which means this file should NOT be shared on the internet> bio: <insert bio here and make sure the text block follows YAML linting standard> img: backend/setup/profile-pictures/<firstname-lastname.jpg> <Also don't forget to add this file to the directory -- see below> groups: - Team <see the backend.settings.py file and the dictionary AUTO_GROUPS to find the available groups to add here> blurb: workshop: <slug to the workshop> text: <blurb for the workshop> links: - text: <whatever text you want to show for the link> url: <a valid full URL> cat: <project OR personal> This section needs to be added to whichever category of user you wish to add: SUPER : Has full access to the site and all the database models STAFF : Has backend access to the admin interface, but not necessarily to all the database models. USER : Has no acccess to the admin interface but is a normal \"learner\" on the site. See below for an example of how the YAML file needs to be structured. Adding an image \u00b6 Note: It is important to not forget to add the image file that you list in the users.yml file to the correct directory. Full example of YAML file users.yml \u00b6 by_groups: SUPER: - first_name: Test last_name: Superuser username: test password: test groups: - Team pronouns: \"she\" STAFF: - first_name: Test last_name: Staffuser username: test password: test groups: - Team pronouns: \"he\" USER: - first_name: Test last_name: User username: test password: test groups: - Learner pronouns: \"they\"","title":"Adding a new user"},{"location":"settings/add-new-user/#adding-a-new-user","text":"","title":"Adding a new user"},{"location":"settings/add-new-user/#collecting-information","text":"For each user, you will need to collect some information: First name(s) Last name(s) Username Pronouns the person uses Password (this can always be changed) Bio Image in JPEG or PNG format (see below) Any professional or personal websites to add to the profile","title":"Collecting information"},{"location":"settings/add-new-user/#filling-out-the-yaml-file","text":"Once you have all the information collected, you can start working in the file backend/setup/users.yml where you want to add the collected information above, in a format that follows this template: - first_name: <First name> last_name: <Last name(s)> pronouns: <Which pronouns the person uses> username: usernamewithoutspacesorothercharacters password: <clear-text password here - which means this file should NOT be shared on the internet> bio: <insert bio here and make sure the text block follows YAML linting standard> img: backend/setup/profile-pictures/<firstname-lastname.jpg> <Also don't forget to add this file to the directory -- see below> groups: - Team <see the backend.settings.py file and the dictionary AUTO_GROUPS to find the available groups to add here> blurb: workshop: <slug to the workshop> text: <blurb for the workshop> links: - text: <whatever text you want to show for the link> url: <a valid full URL> cat: <project OR personal> This section needs to be added to whichever category of user you wish to add: SUPER : Has full access to the site and all the database models STAFF : Has backend access to the admin interface, but not necessarily to all the database models. USER : Has no acccess to the admin interface but is a normal \"learner\" on the site. See below for an example of how the YAML file needs to be structured.","title":"Filling out the YAML file"},{"location":"settings/add-new-user/#adding-an-image","text":"Note: It is important to not forget to add the image file that you list in the users.yml file to the correct directory.","title":"Adding an image"},{"location":"settings/add-new-user/#full-example-of-yaml-file-usersyml","text":"by_groups: SUPER: - first_name: Test last_name: Superuser username: test password: test groups: - Team pronouns: \"she\" STAFF: - first_name: Test last_name: Staffuser username: test password: test groups: - Team pronouns: \"he\" USER: - first_name: Test last_name: User username: test password: test groups: - Learner pronouns: \"they\"","title":"Full example of YAML file users.yml"},{"location":"under-the-hood/build/","text":"The build command explained \u00b6 Just like the build command, ingest is a \"shortcut\" that runs a number of commands, which can, just like the build commands parts, be run individually. The ingest command runs them all in the correct order: ingestgroups ingestusers ingestglossary ingestinstalls ingestinsights ingestworkshop ingestsnippets ingestblurbs ingestprerequisite","title":"build"},{"location":"under-the-hood/build/#the-build-command-explained","text":"Just like the build command, ingest is a \"shortcut\" that runs a number of commands, which can, just like the build commands parts, be run individually. The ingest command runs them all in the correct order: ingestgroups ingestusers ingestglossary ingestinstalls ingestinsights ingestworkshop ingestsnippets ingestblurbs ingestprerequisite","title":"The build command explained"},{"location":"under-the-hood/file-structure/","text":"File structure explained \u00b6 TODO: I want to add here an explanation of what things to keep in mind for the django-app...","title":"File structure"},{"location":"under-the-hood/file-structure/#file-structure-explained","text":"TODO: I want to add here an explanation of what things to keep in mind for the django-app...","title":"File structure explained"},{"location":"under-the-hood/ingest/","text":"The ingest command explained \u00b6 The build command is in fact a \"shortcut\" that actually runs a number of commands, which can also be run individually, in the correct order: buildgroups buildusers buildglossary buildinstalls buildinsights buildworkshop buildblurbs All of these can be placed in place of build on the command line above, like so: $ python manage.py buildgroups $ python manage.py users $ python manage.py ...","title":"ingest"},{"location":"under-the-hood/ingest/#the-ingest-command-explained","text":"The build command is in fact a \"shortcut\" that actually runs a number of commands, which can also be run individually, in the correct order: buildgroups buildusers buildglossary buildinstalls buildinsights buildworkshop buildblurbs All of these can be placed in place of build on the command line above, like so: $ python manage.py buildgroups $ python manage.py users $ python manage.py ...","title":"The ingest command explained"},{"location":"under-the-hood/localserver/","text":"The localserver command explained \u00b6","title":"localserver"},{"location":"under-the-hood/localserver/#the-localserver-command-explained","text":"","title":"The localserver command explained"}]}