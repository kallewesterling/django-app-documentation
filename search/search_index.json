{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to the Documentation for the DHRI Curriculum website \u00b6 The Digital Humanities Research Institute (DHRI) is an intensive, community-oriented, and foundational approach to learning technical skills in service of humanities teaching and learning. This is the documentation page for how to contribute to the project with a workshop , a term , or set up a local instance of our curriculum site on your computer , or deploy the application in the cloud .","title":"Welcome"},{"location":"index.html#welcome-to-the-documentation-for-the-dhri-curriculum-website","text":"The Digital Humanities Research Institute (DHRI) is an intensive, community-oriented, and foundational approach to learning technical skills in service of humanities teaching and learning. This is the documentation page for how to contribute to the project with a workshop , a term , or set up a local instance of our curriculum site on your computer , or deploy the application in the cloud .","title":"Welcome to the Documentation for the DHRI Curriculum website"},{"location":"roadmap.html","text":"Roadmap \u00b6 The app is likely to be a \"perpetual beta\" app, which means that in its lifespan, it will feed into the public branch. Current backlog: v1.0-dev \u00b6 The features listed here are all being actively worked on right now. Bug: Wrong installation modules pulling into command line workshop landing page ( #454 ) This is a high-priority issue as we currently have the installation requirements turned off . It seems that the bug has to do with the way that the Prerequisite -> PrerequisiteSoftware models are set up. Needs resolve soon. \"Forgot my password\" feature ( #457 ) The feature has already been build in a very rudimentary way but needs to be built out frontend-wise and included with links in the login screen, etc. Potential future major issue: Dependency on GitHub API token might become a problem ( #469 ) Beginning August 13, 2021, GitHub will no longer accept account passwords when authenticating Git operations on GitHub.com. I want to make sure that we will not run into future issues with the GitHub backend, although we can work our way through the summer on the current system. Better to have this on the \"horizon\" (i.e. the backlog) right now. Product backlog: v1.0-beta1 \u00b6 The features listed here are all featured with concrete outcomes and clearly defined scopes. If they do not have outcomes and scopes clearly defined, they should be reclassified as v1.0 features, which should be considered the product backlog of the \"final\" version 1.0 . Add new assessment model: ExitSlip (and related models) enhancement ( #364 ) Self-assessment is currently automatically generated on the Theory to Practice page, but the idea here is to build out something more like the exit slip system that we have used as part of the DHRI model, which could be generalized and then connected up to the idea of institutes running this site as part of their own instances, which could then be used to consolidate data about the system being run in different locales (#226). That's more for blue skies dev though. In this issue, for v1.0 beta, we had envisioned the idea of being able to automate the exit slip work through, say, the introduction of an ExitSlip model that ties in with the Question model that we already have set up. Revisit how to send comments / updates ( #330 ) This issue was dependent on re-opening registration ability (#348), which has since been closed\u2014thus ready to be tested and updated to have better integrated functionality. Perhaps this should be marked more as a v1.0 feature, but it should be fairly simple to implement and test it. Revisit/redesign image saving in ingestion enhancement ( #316 ) This is a continuation of an earlier issue, #291, which was resolved, but \"feels patched\" and needs some revisit and some more love and care. The image ingestion could be a more elegant solution than it currently is. Set up MySQL database again ( #313 ) During an earlier development phase, we test-ran the MySQL to make sure it worked, and it did. Since then, when we went into the first virtual DHRI in Winter 2020, we switched back to a sqlite solution. It would be ideal, especially if the platform grows more, to transition the backend to MySQL. Product backlog: v1.0 \u00b6 The features listed here are long-term goals without concrete outcome. They will all need more in-depth work. Make installation instructions more present early in Lessons ( #253 ) We might want to make it clearer\u2014more visible and present throughout\u2014in the beginning of each workshop, linking the learner to installation instructions in case they need them. A reminder or a \"pre-flight check,\" of sorts, before a learner embarks on their workshop, that they have installed all the prerequisites, etc. Right now, prerequisites really work as \"recommended\"\u2014what if it was presented as a checklist that you have to check off before you start? Go over all and ensure that workshops' resources have descriptive elements content enhancement ( #281 ) This is a frontend/editing issue. All \"resources\" (readings, tutorials, projects, etc.) that have links, should all have descriptive text as its link text, and preferably have an explanatory text that follows the reference/link, with more information why the learner should click the link. Since it's all pulled into the library page, separate from the workshop, it would be great if this content could live on its own. Build test cases for all models and views ( #225 ) For a finished product, v1.0, we would like to have models and views running through the built-in Django Test classes, especially if we're thinking about moving ahead with a Docker solution or something similar in a future version. Product backlog: v2.0 \u00b6 Currently in blue skies research mode. The features listed here are all potential future modules and/or wishlist items. This work is being done in a laboratory branch blue-sky under kallewesterling 's user. Build code-runner app ( #89 ) We have discussed that, at some point, the Curriculum website should have a \"code runner\" (like REPL.it ) and perhaps inspired by Sphinx Thebelab . This is a long build process ahead. Difficulty levels ( #90 ) At a very early stage of the DHRI development process, we discussed whether to be able to offer learners \"difficulty levels.\" We decided to deal with it in the content/description instead at the time, but left a case open for a potential future case where we could have difficulty levels in the app. (see #25) Tracks app ( #139 ) A part of the interface that made sure certain workshops were connected in a \"track,\" that the learner could choose to follow. They could also be \"branded\" as certain institutes, or parts of the institute (Python/R track, for instance). Humanities Commons integration ( #128 ) Started groundwork, but a lot of future development to be done here, to integrate Humanities Commons into our project and our site. A potential way to do so is using the website's integration of wp-json which has already been experimented as a collaborating agent with Django. See the issue for more detail. Build admin interface ( #222 ) As of v1.0, the admin interface of the Curriculum website uses Django's built-in administration interface. In the future, we likely want to build out our own administrative interface, that allows for different users with different views/access (learners, institute organizers/community leaders, their collaborators, teaching fellows, super admins, etc.). Institutes app ( #223 ) Groundwork laid here for an Institutes model in an app, that could be used to style the website with certain accent colors, etc. This is also what could connect the Track idea (see #139) as well as create new user groups, etc. (see description above for #222 for ideas). Integrate a Slack feature ( #226 ) Depending on whether we want to build out the community component based on Slack or on Mattermost, we'll need to think further on this. If we want hooks to tie in with the website, the Mattermost API is likely a better way to go, although the Slack API seems to be pretty OK too. These things can change, especially considering that Slack is for-profit and will likely close down API access in different way.s API app enhancement ( #243 ) Using the Django REST framework , the Curriculum website would likely benefit, speed-wise, from being built as a backend API + frontend ES6 framework, like React. This would entail a lot of re-programming of the site, and rethinking of its infrastructure, but it would be really cool, and could also enable us to move into an Electron app , which opens a whole lot of other doors.","title":"Roadmap"},{"location":"roadmap.html#roadmap","text":"The app is likely to be a \"perpetual beta\" app, which means that in its lifespan, it will feed into the public branch.","title":"Roadmap"},{"location":"roadmap.html#current-backlog-v10-dev","text":"The features listed here are all being actively worked on right now. Bug: Wrong installation modules pulling into command line workshop landing page ( #454 ) This is a high-priority issue as we currently have the installation requirements turned off . It seems that the bug has to do with the way that the Prerequisite -> PrerequisiteSoftware models are set up. Needs resolve soon. \"Forgot my password\" feature ( #457 ) The feature has already been build in a very rudimentary way but needs to be built out frontend-wise and included with links in the login screen, etc. Potential future major issue: Dependency on GitHub API token might become a problem ( #469 ) Beginning August 13, 2021, GitHub will no longer accept account passwords when authenticating Git operations on GitHub.com. I want to make sure that we will not run into future issues with the GitHub backend, although we can work our way through the summer on the current system. Better to have this on the \"horizon\" (i.e. the backlog) right now.","title":"Current backlog: v1.0-dev"},{"location":"roadmap.html#product-backlog-v10-beta1","text":"The features listed here are all featured with concrete outcomes and clearly defined scopes. If they do not have outcomes and scopes clearly defined, they should be reclassified as v1.0 features, which should be considered the product backlog of the \"final\" version 1.0 . Add new assessment model: ExitSlip (and related models) enhancement ( #364 ) Self-assessment is currently automatically generated on the Theory to Practice page, but the idea here is to build out something more like the exit slip system that we have used as part of the DHRI model, which could be generalized and then connected up to the idea of institutes running this site as part of their own instances, which could then be used to consolidate data about the system being run in different locales (#226). That's more for blue skies dev though. In this issue, for v1.0 beta, we had envisioned the idea of being able to automate the exit slip work through, say, the introduction of an ExitSlip model that ties in with the Question model that we already have set up. Revisit how to send comments / updates ( #330 ) This issue was dependent on re-opening registration ability (#348), which has since been closed\u2014thus ready to be tested and updated to have better integrated functionality. Perhaps this should be marked more as a v1.0 feature, but it should be fairly simple to implement and test it. Revisit/redesign image saving in ingestion enhancement ( #316 ) This is a continuation of an earlier issue, #291, which was resolved, but \"feels patched\" and needs some revisit and some more love and care. The image ingestion could be a more elegant solution than it currently is. Set up MySQL database again ( #313 ) During an earlier development phase, we test-ran the MySQL to make sure it worked, and it did. Since then, when we went into the first virtual DHRI in Winter 2020, we switched back to a sqlite solution. It would be ideal, especially if the platform grows more, to transition the backend to MySQL.","title":"Product backlog: v1.0-beta1"},{"location":"roadmap.html#product-backlog-v10","text":"The features listed here are long-term goals without concrete outcome. They will all need more in-depth work. Make installation instructions more present early in Lessons ( #253 ) We might want to make it clearer\u2014more visible and present throughout\u2014in the beginning of each workshop, linking the learner to installation instructions in case they need them. A reminder or a \"pre-flight check,\" of sorts, before a learner embarks on their workshop, that they have installed all the prerequisites, etc. Right now, prerequisites really work as \"recommended\"\u2014what if it was presented as a checklist that you have to check off before you start? Go over all and ensure that workshops' resources have descriptive elements content enhancement ( #281 ) This is a frontend/editing issue. All \"resources\" (readings, tutorials, projects, etc.) that have links, should all have descriptive text as its link text, and preferably have an explanatory text that follows the reference/link, with more information why the learner should click the link. Since it's all pulled into the library page, separate from the workshop, it would be great if this content could live on its own. Build test cases for all models and views ( #225 ) For a finished product, v1.0, we would like to have models and views running through the built-in Django Test classes, especially if we're thinking about moving ahead with a Docker solution or something similar in a future version.","title":"Product backlog: v1.0"},{"location":"roadmap.html#product-backlog-v20","text":"Currently in blue skies research mode. The features listed here are all potential future modules and/or wishlist items. This work is being done in a laboratory branch blue-sky under kallewesterling 's user. Build code-runner app ( #89 ) We have discussed that, at some point, the Curriculum website should have a \"code runner\" (like REPL.it ) and perhaps inspired by Sphinx Thebelab . This is a long build process ahead. Difficulty levels ( #90 ) At a very early stage of the DHRI development process, we discussed whether to be able to offer learners \"difficulty levels.\" We decided to deal with it in the content/description instead at the time, but left a case open for a potential future case where we could have difficulty levels in the app. (see #25) Tracks app ( #139 ) A part of the interface that made sure certain workshops were connected in a \"track,\" that the learner could choose to follow. They could also be \"branded\" as certain institutes, or parts of the institute (Python/R track, for instance). Humanities Commons integration ( #128 ) Started groundwork, but a lot of future development to be done here, to integrate Humanities Commons into our project and our site. A potential way to do so is using the website's integration of wp-json which has already been experimented as a collaborating agent with Django. See the issue for more detail. Build admin interface ( #222 ) As of v1.0, the admin interface of the Curriculum website uses Django's built-in administration interface. In the future, we likely want to build out our own administrative interface, that allows for different users with different views/access (learners, institute organizers/community leaders, their collaborators, teaching fellows, super admins, etc.). Institutes app ( #223 ) Groundwork laid here for an Institutes model in an app, that could be used to style the website with certain accent colors, etc. This is also what could connect the Track idea (see #139) as well as create new user groups, etc. (see description above for #222 for ideas). Integrate a Slack feature ( #226 ) Depending on whether we want to build out the community component based on Slack or on Mattermost, we'll need to think further on this. If we want hooks to tie in with the website, the Mattermost API is likely a better way to go, although the Slack API seems to be pretty OK too. These things can change, especially considering that Slack is for-profit and will likely close down API access in different way.s API app enhancement ( #243 ) Using the Django REST framework , the Curriculum website would likely benefit, speed-wise, from being built as a backend API + frontend ES6 framework, like React. This would entail a lot of re-programming of the site, and rethinking of its infrastructure, but it would be really cool, and could also enable us to move into an Electron app , which opens a whole lot of other doors.","title":"Product backlog: v2.0"},{"location":"backend/index.html","text":"Getting started with the backend \u00b6 Overview of the Django workflow \u00b6 In order to explain the workflow of what happens in the application, here is a visual representation of the flow from the end user and the administrator end, and both of their interactions with the Django application. When the end user sends a HTTP request to the server, Django (in reality, Django's wsgi application, but we will not get into that now) will handle the request, and use its internal settings to send appropriate queries to the backend database . In this version (and the previous one), the database backend is a MySQL database. The database will send back its results, and Django will send the response to its template generator , which will create the response (in HTML format, in most cases, to the end user). On the administrator 's side, we can interact with django through the built-in manage.py command, via the command line. With our Django application comes a custom-built command that can run through Django's manage.py , and it's called build . The easiest way to run it, is to run python manage.py build (for more information about this command, see Populate Database ). Once you run the build command, it will loop through all repositories, downloading all of the markdown files from respective repositories, and parse them, using a \"home-cooked\" Python script. The script converts markdown to HTML, as well, first trying to do so through GitHub's REST API (via PyGithub ) and, if that fails, using the Python-Markdown package, with some plug-ins.","title":"Getting started with the backend"},{"location":"backend/index.html#getting-started-with-the-backend","text":"","title":"Getting started with the backend"},{"location":"backend/index.html#overview-of-the-django-workflow","text":"In order to explain the workflow of what happens in the application, here is a visual representation of the flow from the end user and the administrator end, and both of their interactions with the Django application. When the end user sends a HTTP request to the server, Django (in reality, Django's wsgi application, but we will not get into that now) will handle the request, and use its internal settings to send appropriate queries to the backend database . In this version (and the previous one), the database backend is a MySQL database. The database will send back its results, and Django will send the response to its template generator , which will create the response (in HTML format, in most cases, to the end user). On the administrator 's side, we can interact with django through the built-in manage.py command, via the command line. With our Django application comes a custom-built command that can run through Django's manage.py , and it's called build . The easiest way to run it, is to run python manage.py build (for more information about this command, see Populate Database ). Once you run the build command, it will loop through all repositories, downloading all of the markdown files from respective repositories, and parse them, using a \"home-cooked\" Python script. The script converts markdown to HTML, as well, first trying to do so through GitHub's REST API (via PyGithub ) and, if that fails, using the Python-Markdown package, with some plug-ins.","title":"Overview of the Django workflow"},{"location":"backend/1-installing-a-local-instance.html","text":"1. Installing a local instance \u00b6 Step 1. Clone the repository \u00b6 First, clone this directory to your local computer by navigating to the parent directory where you want to place the django-app folder, and then running the following command: 1 2 3 4 $ git clone https://github.com/DHRI-Curriculum/django-app Cloning into 'django-app' ... ... Resolving deltas: 100 % ( 1843 /1843 ) , done . After it is finished, navigate into the repository, using: 1 $ cd django-app Step 2. Create virtual enviroment \u00b6 Next, create a virtual environment for Django to run in: 1 $ python -m venv env Then activate the environment: 1 $ source env/bin/activate Step 3: Install requirements \u00b6 The script contains a requirements.txt file in the root of the repository, which makes it easy for you to run a command to run all the required dependencies: 1 2 3 $ pip install -r requirements.txt Collecting django == 3 .0.7 ( from -r requirements.txt ( line 1 )) ... That should show you the progress of the installation of all the python dependencies for the project. Step 4: Add your secrets \u00b6 Set up all your secrets as environment variables: 1 $ SECRET_KEY = \"<create a django secret key here>\" 1 2 3 $ EMAIL_HOST_USER = \"<insert your email user here>\" $ EMAIL_HOST_PASSWORD = \"<insert your email password here>\" $ GITHUB_TOKEN = \"<insert your GitHub token here>\" Optional step: Backup solution \u00b6 If you want to create a backup solution for the secret keys, put the values (with no surrounding quotation marks) of them into a text file with the name for the variable into the ./app/.secrets/ directory. Thus, the directory should look as follows: 1 2 3 4 5 6 7 8 9 10 11 django-app | |--- app | |---- .secrets | |--- SECRET_KEY |--- EMAIL_HOST_USER |--- EMAIL_HOST_PASSWORD |--- GITHUB_TOKEN |","title":"1. Installing required components"},{"location":"backend/1-installing-a-local-instance.html#1-installing-a-local-instance","text":"","title":"1. Installing a local instance"},{"location":"backend/1-installing-a-local-instance.html#step-1-clone-the-repository","text":"First, clone this directory to your local computer by navigating to the parent directory where you want to place the django-app folder, and then running the following command: 1 2 3 4 $ git clone https://github.com/DHRI-Curriculum/django-app Cloning into 'django-app' ... ... Resolving deltas: 100 % ( 1843 /1843 ) , done . After it is finished, navigate into the repository, using: 1 $ cd django-app","title":"Step 1. Clone the repository"},{"location":"backend/1-installing-a-local-instance.html#step-2-create-virtual-enviroment","text":"Next, create a virtual environment for Django to run in: 1 $ python -m venv env Then activate the environment: 1 $ source env/bin/activate","title":"Step 2. Create virtual enviroment"},{"location":"backend/1-installing-a-local-instance.html#step-3-install-requirements","text":"The script contains a requirements.txt file in the root of the repository, which makes it easy for you to run a command to run all the required dependencies: 1 2 3 $ pip install -r requirements.txt Collecting django == 3 .0.7 ( from -r requirements.txt ( line 1 )) ... That should show you the progress of the installation of all the python dependencies for the project.","title":"Step 3: Install requirements"},{"location":"backend/1-installing-a-local-instance.html#step-4-add-your-secrets","text":"Set up all your secrets as environment variables: 1 $ SECRET_KEY = \"<create a django secret key here>\" 1 2 3 $ EMAIL_HOST_USER = \"<insert your email user here>\" $ EMAIL_HOST_PASSWORD = \"<insert your email password here>\" $ GITHUB_TOKEN = \"<insert your GitHub token here>\"","title":"Step 4: Add your secrets"},{"location":"backend/1-installing-a-local-instance.html#optional-step-backup-solution","text":"If you want to create a backup solution for the secret keys, put the values (with no surrounding quotation marks) of them into a text file with the name for the variable into the ./app/.secrets/ directory. Thus, the directory should look as follows: 1 2 3 4 5 6 7 8 9 10 11 django-app | |--- app | |---- .secrets | |--- SECRET_KEY |--- EMAIL_HOST_USER |--- EMAIL_HOST_PASSWORD |--- GITHUB_TOKEN |","title":"Optional step: Backup solution"},{"location":"backend/2-populating-the-database.html","text":"2. Populating the Database \u00b6 In order to populate (and update) the content on the DHRI curriculum website using the live data from GitHub, there is a simple two-part process. This app has been built with support to: mirror all the data from the DHRI Curriculum; and ingest the data into the database. The two sections below should cover the process in general, and also provides link to more detailed information if you want to dig deeper into the process. If your database is not yet set up, you will need to first set up the database by running two commands from Django's built-in management script. To make the process smoother, you can comine both on the command line by joining them using && : 1 $ python manage.py makemigrations && python manage.py migrate That should tell you which migrations that will run, and then proceed to run the migrations: 1 2 3 4 5 6 7 No changes detected Operations to perform: Apply all migrations: admin, assessment, auth, contenttypes, feedback, glossary, insight, install, learner, lesson, library, sessions, website, workshop Running migrations: Applying contenttypes.0001_initial... OK Applying auth.0001_initial... OK ... Step 1. Mirror the live data: build \u00b6 Next, we want to make a mirrored copy of all of the data that lives in the GitHub repositories related to the DHRI curriculum. We can do so with the build shortcut command: 1 $ python manage.py build This will take some time\u2014up to several minutes\u2014so get yourself a cup of coffee. You're doing well! The build command should create a local \"mirror\" of all the GitHub repositories related to the DHRI curriculum, inside a directory called _preload in the root of the repository. There is a (large) possibility of you running into error message, warnings, etc. in this process. Don't worry too much about them; the ones that will stop the import of the data to the database will stop you in your tracks with a red error message. Everything else is on a \"warning\" level, which means that you can safely continue with the process. All of this is described in the debugging part of the documentation. Once the build command has finished, you can move on to Step 2 below, or read the following section with more detailed information about the build command. Optional flags \u00b6 The build command can also be called using flags that modify its function and can be combined as you see fit: Flag Description --silent Makes as little output as possible, although still saves all the information in log files (see debugging docs ). --verbose Provides all output possible, which can be overwhelming. Good for debug purposes, not for the faint of heart. Info Click here to read more detail about each of these commands and their respective required flags, etc. Step 2. Ingest the data from your local files: ingest \u00b6 In the following step, we want to ingest the mirrored copy of all of the data that lives in the GitHub repositories, downloaded and structured in Step 1. We can do so with the ingest shortcut command: 1 $ python manage.py ingest Granted that you do not run into any problems (warnings, error messages, etc.), the database should now be fully populated with the information necessary to get it all up and running . Optional flags \u00b6 The ingest command can also be called using flags that modify its function and can be combined as you see fit: Flag Description --silent Makes as little output as possible, although still saves all the information in log files (see debugging docs ). --verbose Provides all output possible, which can be overwhelming. Good for debug purposes, not for the faint of heart. --reset Removes all the DHRI-related objects in the database and starts a fresh installation. --resetusers Removes all the users in the database and starts a fresh installation from the users.yml file. --force Automatically selects \"yes\" for questions about whether database objects should be updated. \"Forces\" its way. Info Click here to read more detail about each of these commands and their respective required flags. All of this is described in the debugging part of the documentation.","title":"2. Populating the database"},{"location":"backend/2-populating-the-database.html#2-populating-the-database","text":"In order to populate (and update) the content on the DHRI curriculum website using the live data from GitHub, there is a simple two-part process. This app has been built with support to: mirror all the data from the DHRI Curriculum; and ingest the data into the database. The two sections below should cover the process in general, and also provides link to more detailed information if you want to dig deeper into the process. If your database is not yet set up, you will need to first set up the database by running two commands from Django's built-in management script. To make the process smoother, you can comine both on the command line by joining them using && : 1 $ python manage.py makemigrations && python manage.py migrate That should tell you which migrations that will run, and then proceed to run the migrations: 1 2 3 4 5 6 7 No changes detected Operations to perform: Apply all migrations: admin, assessment, auth, contenttypes, feedback, glossary, insight, install, learner, lesson, library, sessions, website, workshop Running migrations: Applying contenttypes.0001_initial... OK Applying auth.0001_initial... OK ...","title":"2. Populating the Database"},{"location":"backend/2-populating-the-database.html#step-1-mirror-the-live-data-build","text":"Next, we want to make a mirrored copy of all of the data that lives in the GitHub repositories related to the DHRI curriculum. We can do so with the build shortcut command: 1 $ python manage.py build This will take some time\u2014up to several minutes\u2014so get yourself a cup of coffee. You're doing well! The build command should create a local \"mirror\" of all the GitHub repositories related to the DHRI curriculum, inside a directory called _preload in the root of the repository. There is a (large) possibility of you running into error message, warnings, etc. in this process. Don't worry too much about them; the ones that will stop the import of the data to the database will stop you in your tracks with a red error message. Everything else is on a \"warning\" level, which means that you can safely continue with the process. All of this is described in the debugging part of the documentation. Once the build command has finished, you can move on to Step 2 below, or read the following section with more detailed information about the build command.","title":"Step 1. Mirror the live data: build"},{"location":"backend/2-populating-the-database.html#optional-flags","text":"The build command can also be called using flags that modify its function and can be combined as you see fit: Flag Description --silent Makes as little output as possible, although still saves all the information in log files (see debugging docs ). --verbose Provides all output possible, which can be overwhelming. Good for debug purposes, not for the faint of heart. Info Click here to read more detail about each of these commands and their respective required flags, etc.","title":"Optional flags"},{"location":"backend/2-populating-the-database.html#step-2-ingest-the-data-from-your-local-files-ingest","text":"In the following step, we want to ingest the mirrored copy of all of the data that lives in the GitHub repositories, downloaded and structured in Step 1. We can do so with the ingest shortcut command: 1 $ python manage.py ingest Granted that you do not run into any problems (warnings, error messages, etc.), the database should now be fully populated with the information necessary to get it all up and running .","title":"Step 2. Ingest the data from your local files: ingest"},{"location":"backend/2-populating-the-database.html#optional-flags_1","text":"The ingest command can also be called using flags that modify its function and can be combined as you see fit: Flag Description --silent Makes as little output as possible, although still saves all the information in log files (see debugging docs ). --verbose Provides all output possible, which can be overwhelming. Good for debug purposes, not for the faint of heart. --reset Removes all the DHRI-related objects in the database and starts a fresh installation. --resetusers Removes all the users in the database and starts a fresh installation from the users.yml file. --force Automatically selects \"yes\" for questions about whether database objects should be updated. \"Forces\" its way. Info Click here to read more detail about each of these commands and their respective required flags. All of this is described in the debugging part of the documentation.","title":"Optional flags"},{"location":"backend/3-running-the-instance-locally.html","text":"3. Running the instance locally \u00b6 You are now all done. You can run the server by running this command: 1 $ python manage.py runserver This command automatically create a development server for you, and you should be able to now navigate to http://localhost:8000 (or its alias http://127.0.0.1:8000) in any browser of your choice on your computer. Note that your local \"server\" here will not be accessible on the Internet, or on your local network. For the latter, follow the instructions below. If you want to host the site on a public-facing Internet server, you need to deploy the application to a service that provides support for Django applications, such as Reclaim Hosting. Optional: Enable Access on Local Network (Advanced) \u00b6 If you want to make your development server accessible through your local network, instead of running the runserver command from the section above, you can run the custom-made following command: 1 $ python manage.py localserver The result will look similar to that of runserver above, but your address now notably is 0.0.0.0. If your computer's local IP address on your network is 192.168.1.6, for instance, you can now navigate to that IP address from anywhere on your local network to access the curriculum website. Note that localserver is a custom-made script for the backend app here, and not a native Django command. Optional: Adjust Settings \u00b6 The localserver command might give you a warning that notifies you that '*' has been added to ALLOWED_HOSTS . You can let this warning be or choose to rectify the \"problem.\" You will do so by following these two steps: Open the file app/settings.py Find the line that reads: ALLOWED_HOSTS = [] and change it to: ALLOWED_HOSTS = ['*'] Next time you run the localserver script on your command line, the warning will not appear.","title":"3. Running the local instance"},{"location":"backend/3-running-the-instance-locally.html#3-running-the-instance-locally","text":"You are now all done. You can run the server by running this command: 1 $ python manage.py runserver This command automatically create a development server for you, and you should be able to now navigate to http://localhost:8000 (or its alias http://127.0.0.1:8000) in any browser of your choice on your computer. Note that your local \"server\" here will not be accessible on the Internet, or on your local network. For the latter, follow the instructions below. If you want to host the site on a public-facing Internet server, you need to deploy the application to a service that provides support for Django applications, such as Reclaim Hosting.","title":"3. Running the instance locally"},{"location":"backend/3-running-the-instance-locally.html#optional-enable-access-on-local-network-advanced","text":"If you want to make your development server accessible through your local network, instead of running the runserver command from the section above, you can run the custom-made following command: 1 $ python manage.py localserver The result will look similar to that of runserver above, but your address now notably is 0.0.0.0. If your computer's local IP address on your network is 192.168.1.6, for instance, you can now navigate to that IP address from anywhere on your local network to access the curriculum website. Note that localserver is a custom-made script for the backend app here, and not a native Django command.","title":"Optional: Enable Access on Local Network (Advanced)"},{"location":"backend/3-running-the-instance-locally.html#optional-adjust-settings","text":"The localserver command might give you a warning that notifies you that '*' has been added to ALLOWED_HOSTS . You can let this warning be or choose to rectify the \"problem.\" You will do so by following these two steps: Open the file app/settings.py Find the line that reads: ALLOWED_HOSTS = [] and change it to: ALLOWED_HOSTS = ['*'] Next time you run the localserver script on your command line, the warning will not appear.","title":"Optional: Adjust Settings"},{"location":"backend/building-backup-content.html","text":"Keeping up-to-date: Building GitHub backup content \u00b6 When you should follow these instructions The instructions below should be followed after you have made edits to any of the curriculum website's linked repositories. localdjango is a little Python program that automatically generates the README.md and the sections content for each workshop, to make a nice little visible and usable fall-back option, in case the curriculum.dhinstitutes.org site is down, for instance. Or for anyone who comes across our content on GitHub. Using the instructions below, you will make sure that the README.md file and the sections directory are all synchronized with the content for each workshop (which lives in frontmatter.md , lessons.md , theory-to-practice.md , and image.md \u2014 that's where you make all your edits). 1. Navigate to the workshop's local directory \u00b6 In this example, we will use the DHRI-Curriculum/python repository. You can replace this with any other workshop. 1 $ cd /path/to/python/ 2. Initiate and check out localdjango \u00b6 If the localdjango directory is empty, we need to initiate and check out the so-called \"submodule.\" We can do so by putting both commands on one line for convenience: 1 $ git submodule init && git submodule update You should receive a message back from the command prompt that says: 1 Submodule path 'localdjango' : checked out '0bfdef48ea968121f08122666611b2c4f43b6b81' Info Note that step 2 might not be necessary if the submodule is already initiated and up to date. It won't hurt to run the commands above, but you will not receive a message back. 3. Run localdjango \u00b6 Since your content is in place and up to date (following step 7\u201310 of the Creating a new workshop instructions ), we can run the following command from the repository's root: 1 $ python localdjango/setup.py It will ask you some questions, but for the most part, the answers are automatically generated from your content. Once the script finishes, you should have an updated README.md file and a sections directory in the repository. 4. Synchronize with git \u00b6 Since the point is for us to have an up-to-date version of the repository's content live on GitHub, we need to remember to synchronize the repository with git . You can use VS Code's GitHub extension... or run the commands on the command line: git add * (for convenience) git commit -m 'Updating from local files.' git push For convenience, you can copy and paste these three commands on one line: 1 $ git add * && git commit -m 'Updating from local files.' && git push","title":"Building GitHub backup content"},{"location":"backend/building-backup-content.html#keeping-up-to-date-building-github-backup-content","text":"When you should follow these instructions The instructions below should be followed after you have made edits to any of the curriculum website's linked repositories. localdjango is a little Python program that automatically generates the README.md and the sections content for each workshop, to make a nice little visible and usable fall-back option, in case the curriculum.dhinstitutes.org site is down, for instance. Or for anyone who comes across our content on GitHub. Using the instructions below, you will make sure that the README.md file and the sections directory are all synchronized with the content for each workshop (which lives in frontmatter.md , lessons.md , theory-to-practice.md , and image.md \u2014 that's where you make all your edits).","title":"Keeping up-to-date: Building GitHub backup content"},{"location":"backend/building-backup-content.html#1-navigate-to-the-workshops-local-directory","text":"In this example, we will use the DHRI-Curriculum/python repository. You can replace this with any other workshop. 1 $ cd /path/to/python/","title":"1. Navigate to the workshop's local directory"},{"location":"backend/building-backup-content.html#2-initiate-and-check-out-localdjango","text":"If the localdjango directory is empty, we need to initiate and check out the so-called \"submodule.\" We can do so by putting both commands on one line for convenience: 1 $ git submodule init && git submodule update You should receive a message back from the command prompt that says: 1 Submodule path 'localdjango' : checked out '0bfdef48ea968121f08122666611b2c4f43b6b81' Info Note that step 2 might not be necessary if the submodule is already initiated and up to date. It won't hurt to run the commands above, but you will not receive a message back.","title":"2. Initiate and check out localdjango"},{"location":"backend/building-backup-content.html#3-run-localdjango","text":"Since your content is in place and up to date (following step 7\u201310 of the Creating a new workshop instructions ), we can run the following command from the repository's root: 1 $ python localdjango/setup.py It will ask you some questions, but for the most part, the answers are automatically generated from your content. Once the script finishes, you should have an updated README.md file and a sections directory in the repository.","title":"3. Run localdjango"},{"location":"backend/building-backup-content.html#4-synchronize-with-git","text":"Since the point is for us to have an up-to-date version of the repository's content live on GitHub, we need to remember to synchronize the repository with git . You can use VS Code's GitHub extension... or run the commands on the command line: git add * (for convenience) git commit -m 'Updating from local files.' git push For convenience, you can copy and paste these three commands on one line: 1 $ git add * && git commit -m 'Updating from local files.' && git push","title":"4. Synchronize with git"},{"location":"backend/updating-the-database.html","text":"Keeping up-to-date: Synchronizing Database with GitHub Repositories \u00b6 When you should follow these instructions The instructions below should be followed after you have made edits to any of the curriculum website's linked repositories. 1. Make sure you are in the root of the Django app \u00b6 1 $ cd /path/to/django-app/ 2. Mirror the live data: build \u00b6 The first thing we want to do is make a mirrored copy of all of the data that lives in the GitHub repositories related to the DHRI curriculum. We can do so with the build shortcut command: 1 $ python manage.py build If you need a reminder or want to read more about this command and what is happening in this step on the Populating the Database page . 3. Ingest the data from your local files: ingest \u00b6 In this step, we want to ingest the mirrored copy of all of the data that lives in the GitHub repositories, downloaded and structured in Step 1. We can do so with the ingest shortcut command: 1 $ python manage.py ingest Tip Now that you have finished keeping the database up to date, don't forget to keep the GitHub files up to date as well .","title":"Synchronizing database with GitHub repositories"},{"location":"backend/updating-the-database.html#keeping-up-to-date-synchronizing-database-with-github-repositories","text":"When you should follow these instructions The instructions below should be followed after you have made edits to any of the curriculum website's linked repositories.","title":"Keeping up-to-date: Synchronizing Database with GitHub Repositories"},{"location":"backend/updating-the-database.html#1-make-sure-you-are-in-the-root-of-the-django-app","text":"1 $ cd /path/to/django-app/","title":"1. Make sure you are in the root of the Django app"},{"location":"backend/updating-the-database.html#2-mirror-the-live-data-build","text":"The first thing we want to do is make a mirrored copy of all of the data that lives in the GitHub repositories related to the DHRI curriculum. We can do so with the build shortcut command: 1 $ python manage.py build If you need a reminder or want to read more about this command and what is happening in this step on the Populating the Database page .","title":"2. Mirror the live data: build"},{"location":"backend/updating-the-database.html#3-ingest-the-data-from-your-local-files-ingest","text":"In this step, we want to ingest the mirrored copy of all of the data that lives in the GitHub repositories, downloaded and structured in Step 1. We can do so with the ingest shortcut command: 1 $ python manage.py ingest Tip Now that you have finished keeping the database up to date, don't forget to keep the GitHub files up to date as well .","title":"3. Ingest the data from your local files: ingest"},{"location":"contributing-content/index.html","text":"Getting started contributing content to the project \u00b6","title":"Getting started contributing"},{"location":"contributing-content/index.html#getting-started-contributing-content-to-the-project","text":"","title":"Getting started contributing content to the project"},{"location":"contributing-content/installation-guides/commit.html","text":"Commit New Installation Instructions to GitHub \u00b6 Step 1. Commit your changes and synchronize with GitHub. \u00b6 Press the version control button in your menubar on the left (alternatively, you can choose SCM from the View menu). Next, hover over your newly added installation instruction file: Then, press the + button to add the files to your commits. Once you press the + button, the file should move from the Changes section to the Staged Changes section. Once all your files with your installation instruction(s) is/are in the Staged Changes section, you are ready to move on. In the Message box above the list, type an instructive message, something along the lines of Adding instruction(s) for: <Software 1>, <Software 2>... Then, press the checkmark above the message box ( \u2713 ). Alternatively, you can press command enter . Next, you want to synchronize your commit(s) with GitHub, by pressing the icon next to your branch name. If it's your first time, you should press the little cloud with an arrow into it. Otherwise, you should press two arrows forming a circle: Step 2. Add a pull request to the v2.0 branch \u00b6 Next, we will want to add a pull request to the v2.0 branch, the current production branch for the DHRI Curriculum's installations. Navigate to GitHub's Compare changes page. Ensure that the base branch (the one you want to merge your changes into ) is selected as v2.0 : On the compare side, you will then want to choose your own branch in the popup menu: You should see a large, green button that says \"Create pull request\" and a green checkmark that says that you're able to merge: Press the \"Create pull request\" button, and fill out the form that pops up with some important information. Note: If you filled out the commit above with information about all the terms you added, that should already be the title of your request and this should be an easy step. Once you're done, press the green \"Create pull request\" button at the bottom of the form. You're done. Once someone gets around to it, your changes might be merged into the repository.","title":"Commit new installation guide to GitHub"},{"location":"contributing-content/installation-guides/commit.html#commit-new-installation-instructions-to-github","text":"","title":"Commit New Installation Instructions to GitHub"},{"location":"contributing-content/installation-guides/commit.html#step-1-commit-your-changes-and-synchronize-with-github","text":"Press the version control button in your menubar on the left (alternatively, you can choose SCM from the View menu). Next, hover over your newly added installation instruction file: Then, press the + button to add the files to your commits. Once you press the + button, the file should move from the Changes section to the Staged Changes section. Once all your files with your installation instruction(s) is/are in the Staged Changes section, you are ready to move on. In the Message box above the list, type an instructive message, something along the lines of Adding instruction(s) for: <Software 1>, <Software 2>... Then, press the checkmark above the message box ( \u2713 ). Alternatively, you can press command enter . Next, you want to synchronize your commit(s) with GitHub, by pressing the icon next to your branch name. If it's your first time, you should press the little cloud with an arrow into it. Otherwise, you should press two arrows forming a circle:","title":"Step 1. Commit your changes and synchronize with GitHub."},{"location":"contributing-content/installation-guides/commit.html#step-2-add-a-pull-request-to-the-v20-branch","text":"Next, we will want to add a pull request to the v2.0 branch, the current production branch for the DHRI Curriculum's installations. Navigate to GitHub's Compare changes page. Ensure that the base branch (the one you want to merge your changes into ) is selected as v2.0 : On the compare side, you will then want to choose your own branch in the popup menu: You should see a large, green button that says \"Create pull request\" and a green checkmark that says that you're able to merge: Press the \"Create pull request\" button, and fill out the form that pops up with some important information. Note: If you filled out the commit above with information about all the terms you added, that should already be the title of your request and this should be an easy step. Once you're done, press the green \"Create pull request\" button at the bottom of the form. You're done. Once someone gets around to it, your changes might be merged into the repository.","title":"Step 2. Add a pull request to the v2.0 branch"},{"location":"contributing-content/installation-guides/new.html","text":"Build a new installation instruction \u00b6 In this tutorial, we will use VS Code but if you prefer, you can use any other editor or even command line tools. Step 1. Clone the repository. \u00b6 Bring up the Command Palette ( command shift P ) Type git clone When asked to provide repository URL, paste https://github.com/DHRI-Curriculum/install/ into the box. VS Code will ask you where to save your local clone of the repository. Choose wherever you would like to have it. When asked \"Would you like to open the cloned repository?\", press \"Open in New Window\" (to ensure no conflict with any other windows you may have open). Step 2. Create your own branch. \u00b6 In the lower-left corner of the VS Code's window, click on the branch name that you are currently working on (likely \"main\"): In the menu that pops up, select \"Create new branch from...\": Next, provide a branch name for your new branch (following our style guide , choose something along the lines of v2.0-<your-username>-suggested-terms ). Then press enter to create the new branch: You should then be asked to \"Select a ref to create\" in relation to your branch. In this example above, since our desired upstream is the v2.0 branch, you will select origin/v2.0 : You should now be on your own branch of this repository. You can verify that you're on the correct branch by checking your lower-left corner that should have your branch name instead of the formerly active branch. Step 3. Add the installation instruction(s) you believe should be added to the guides folder \u00b6 Before you start to add content to your editing branch, make sure you're adding instructions to the correct folder, guides inside the repository. The installation instructions should be in its own, separate <software-name>.md file. Keep the filename lowercase and replace spaces with '-'. Note that there is a template for term.md available to make the following easier to follow. Add the image assigned to the installation instruction as the first line in the file with an absolute link to the image inside the repository's _django-meta/header-images folder: 1 ![](https://raw.githubusercontent.com/DHRI-Curriculum/install/v2.0/_django-meta/header-images/git%403x.png) After the image, add the name of the software as a level 1 header. The markdown should now look like this: 1 2 3 ![](https://raw.githubusercontent.com/DHRI-Curriculum/install/v2.0/_django-meta/header-images/git%403x.png) # Git (and Git Bash) Immediately following the software name, add the required section ## What it is where you add a description of the software that this guide will install. Be specific as we consider following installation instructions to be part of the foundational skills that learners will acquire in the DHRI.. Under the ## Why we use it header, add a description that follows the format below: 1 For the Digital Humanities Research Institute, we use <insert software here> because <insert reason why we use this software. If it is used instead of another one, explain why we have chosen this software.> Under the two headings ## Installation instructions: macOS and ## Installation instructions: Microsoft Windows respectively, add installation instructions: Each step should be added as a level 3 header ( ### ) following this convention: ### Step 1: <Insert Step 1 Header> Each instruction step should follow this convention: A step should contain no more than one or two clicks/dragging files, or entering information into text boxes, unless there is, for example, a form where you may need to input multiple points of information in the same place. Include a screenshot for each step - see below for example of how to insert it. If there are more complicated things to do, consider making a GIF. Make sure screenshots are up to date and added inside the guides/images directory. Once you are done with all of the installations instructions you would like to add , your VS Code should look something like this: Now you're ready to move on to the next step, committing your changes to GitHub .","title":"Build a new installation guide"},{"location":"contributing-content/installation-guides/new.html#build-a-new-installation-instruction","text":"In this tutorial, we will use VS Code but if you prefer, you can use any other editor or even command line tools.","title":"Build a new installation instruction"},{"location":"contributing-content/installation-guides/new.html#step-1-clone-the-repository","text":"Bring up the Command Palette ( command shift P ) Type git clone When asked to provide repository URL, paste https://github.com/DHRI-Curriculum/install/ into the box. VS Code will ask you where to save your local clone of the repository. Choose wherever you would like to have it. When asked \"Would you like to open the cloned repository?\", press \"Open in New Window\" (to ensure no conflict with any other windows you may have open).","title":"Step 1. Clone the repository."},{"location":"contributing-content/installation-guides/new.html#step-2-create-your-own-branch","text":"In the lower-left corner of the VS Code's window, click on the branch name that you are currently working on (likely \"main\"): In the menu that pops up, select \"Create new branch from...\": Next, provide a branch name for your new branch (following our style guide , choose something along the lines of v2.0-<your-username>-suggested-terms ). Then press enter to create the new branch: You should then be asked to \"Select a ref to create\" in relation to your branch. In this example above, since our desired upstream is the v2.0 branch, you will select origin/v2.0 : You should now be on your own branch of this repository. You can verify that you're on the correct branch by checking your lower-left corner that should have your branch name instead of the formerly active branch.","title":"Step 2. Create your own branch."},{"location":"contributing-content/installation-guides/new.html#step-3-add-the-installation-instructions-you-believe-should-be-added-to-the-guides-folder","text":"Before you start to add content to your editing branch, make sure you're adding instructions to the correct folder, guides inside the repository. The installation instructions should be in its own, separate <software-name>.md file. Keep the filename lowercase and replace spaces with '-'. Note that there is a template for term.md available to make the following easier to follow. Add the image assigned to the installation instruction as the first line in the file with an absolute link to the image inside the repository's _django-meta/header-images folder: 1 ![](https://raw.githubusercontent.com/DHRI-Curriculum/install/v2.0/_django-meta/header-images/git%403x.png) After the image, add the name of the software as a level 1 header. The markdown should now look like this: 1 2 3 ![](https://raw.githubusercontent.com/DHRI-Curriculum/install/v2.0/_django-meta/header-images/git%403x.png) # Git (and Git Bash) Immediately following the software name, add the required section ## What it is where you add a description of the software that this guide will install. Be specific as we consider following installation instructions to be part of the foundational skills that learners will acquire in the DHRI.. Under the ## Why we use it header, add a description that follows the format below: 1 For the Digital Humanities Research Institute, we use <insert software here> because <insert reason why we use this software. If it is used instead of another one, explain why we have chosen this software.> Under the two headings ## Installation instructions: macOS and ## Installation instructions: Microsoft Windows respectively, add installation instructions: Each step should be added as a level 3 header ( ### ) following this convention: ### Step 1: <Insert Step 1 Header> Each instruction step should follow this convention: A step should contain no more than one or two clicks/dragging files, or entering information into text boxes, unless there is, for example, a form where you may need to input multiple points of information in the same place. Include a screenshot for each step - see below for example of how to insert it. If there are more complicated things to do, consider making a GIF. Make sure screenshots are up to date and added inside the guides/images directory. Once you are done with all of the installations instructions you would like to add , your VS Code should look something like this: Now you're ready to move on to the next step, committing your changes to GitHub .","title":"Step 3. Add the installation instruction(s) you believe should be added to the guides folder"},{"location":"contributing-content/installation-guides/file-templates/guide.html","text":"","title":"Guide"},{"location":"contributing-content/installation-guides/images/index.html","text":"Images for documentation \u00b6","title":"Images for documentation"},{"location":"contributing-content/installation-guides/images/index.html#images-for-documentation","text":"","title":"Images for documentation"},{"location":"contributing-content/style-guide/branches/branch-names.html","text":"Branch names \u00b6 Branch names of workshops and other content-oriented repositories (in install , glossary , etc.) should generally follow the convention v1.0 or v2.0 when they are in production. When you're creating \"editing branches\" where you will commit your suggested edits to a content-oriented repository, they should follow the convention <desired upstream, like v2.0>-<your-username>-edits (for instance, v2.0-kallewesterling-edits ).","title":"Branch names"},{"location":"contributing-content/style-guide/branches/branch-names.html#branch-names","text":"Branch names of workshops and other content-oriented repositories (in install , glossary , etc.) should generally follow the convention v1.0 or v2.0 when they are in production. When you're creating \"editing branches\" where you will commit your suggested edits to a content-oriented repository, they should follow the convention <desired upstream, like v2.0>-<your-username>-edits (for instance, v2.0-kallewesterling-edits ).","title":"Branch names"},{"location":"contributing-content/terms/commit.html","text":"Commit New Term to GitHub \u00b6 Step 1. Commit your changes and synchronize with GitHub. \u00b6 Press the version control button in your menubar on the left (alternatively, you can choose SCM from the View menu). Next, hover over your newly added term file: Then, press the + button to add the files to your commits. Once you press the + button, the file should move from the Changes section to the Staged Changes section. Once all your files with your terms are in the Staged Changes section, you are ready to move on. In the Message box above the list, type an instructive message, something along the lines of Adding terms: <Term 1>, <Term 2>, <Term 3> Then, press the checkmark above the message box ( \u2713 ). Alternatively, you can press command enter . Next, you want to synchronize your commit(s) with GitHub, by pressing the icon next to your branch name. If it's your first time, you should press the little cloud with an arrow into it. Otherwise, you should press two arrows forming a circle: Step 2. Add a pull request to the v2.0 branch \u00b6 Next, we will want to add a pull request to the v2.0 branch, the current production branch for the DHRI Curriculum's glossary. Navigate to GitHub's Compare changes page. Ensure that the base branch (the one you want to merge your changes into ) is selected as v2.0 : On the compare side, you will then want to choose your own branch in the popup menu: You should see a large, green button that says \"Create pull request\" and a green checkmark that says that you're able to merge: Press the \"Create pull request\" button, and fill out the form that pops up with some important information. Note: If you filled out the commit above with information about all the terms you added, that should already be the title of your request and this should be an easy step. Once you're done, press the green \"Create pull request\" button at the bottom of the form. You're done. Once someone gets around to it, your changes might be merged into the repository.","title":"Commit new term to GitHub"},{"location":"contributing-content/terms/commit.html#commit-new-term-to-github","text":"","title":"Commit New Term to GitHub"},{"location":"contributing-content/terms/commit.html#step-1-commit-your-changes-and-synchronize-with-github","text":"Press the version control button in your menubar on the left (alternatively, you can choose SCM from the View menu). Next, hover over your newly added term file: Then, press the + button to add the files to your commits. Once you press the + button, the file should move from the Changes section to the Staged Changes section. Once all your files with your terms are in the Staged Changes section, you are ready to move on. In the Message box above the list, type an instructive message, something along the lines of Adding terms: <Term 1>, <Term 2>, <Term 3> Then, press the checkmark above the message box ( \u2713 ). Alternatively, you can press command enter . Next, you want to synchronize your commit(s) with GitHub, by pressing the icon next to your branch name. If it's your first time, you should press the little cloud with an arrow into it. Otherwise, you should press two arrows forming a circle:","title":"Step 1. Commit your changes and synchronize with GitHub."},{"location":"contributing-content/terms/commit.html#step-2-add-a-pull-request-to-the-v20-branch","text":"Next, we will want to add a pull request to the v2.0 branch, the current production branch for the DHRI Curriculum's glossary. Navigate to GitHub's Compare changes page. Ensure that the base branch (the one you want to merge your changes into ) is selected as v2.0 : On the compare side, you will then want to choose your own branch in the popup menu: You should see a large, green button that says \"Create pull request\" and a green checkmark that says that you're able to merge: Press the \"Create pull request\" button, and fill out the form that pops up with some important information. Note: If you filled out the commit above with information about all the terms you added, that should already be the title of your request and this should be an easy step. Once you're done, press the green \"Create pull request\" button at the bottom of the form. You're done. Once someone gets around to it, your changes might be merged into the repository.","title":"Step 2. Add a pull request to the v2.0 branch"},{"location":"contributing-content/terms/new.html","text":"Build a new term \u00b6 In this tutorial, we will use VS Code but if you prefer, you can use any other editor or even command line tools. Step 1. Clone the repository. \u00b6 Bring up the Command Palette ( command shift P ) Type git clone When asked to provide repository URL, paste https://github.com/DHRI-Curriculum/glossary/ into the box. VS Code will ask you where to save your local clone of the repository. Choose wherever you would like to have it. When asked \"Would you like to open the cloned repository?\", press \"Open in New Window\" (to ensure no conflict with any other windows you may have open). Step 2. Create your own branch. \u00b6 In the lower-left corner of the VS Code's window, click on the branch name that you are currently working on (likely \"main\"): In the menu that pops up, select \"Create new branch from...\": Next, provide a branch name for your new branch (following our style guide , choose something along the lines of v2.0-<your-username>-suggested-terms ). Then press enter to create the new branch: You should then be asked to \"Select a ref to create\" in relation to your branch. In this example above, since our desired upstream is the v2.0 branch, you will select origin/v2.0 : You should now be on your own branch of this repository. You can verify that you're on the correct branch by checking your lower-left corner that should have your branch name instead of the formerly active branch. Step 3. Add the term(s) you believe should be added to the terms folder \u00b6 Before you start to add content to your editing branch, make sure you're adding terms to the correct folder, terms inside the repository. The term should be in its own, separate <term>.md file. Keep the filename lowercase and replace spaces with '-'. Note that there is a template for term.md available to make the following easier to follow. Add the term as the first header in the file ( # <term> ) In the first paragraph after the first header, add the explanation of the term. (Optional) Add a section ## Readings where you add a bulletpoint for each reading you think is valuable to grasp the term that you want to add to the glossary. (Optional) Add a section ## Tutorials where you add a bulletpoint for each tutorial you think is valuable to grasp the term that you want to add to the glossary. (Optional) Add a section ## Cheat sheets where you add a bulletpoint for each cheat sheet you think is good for the learner to know about to be able to understand the term. Once you are done with all of the terms you would like to add , your VS Code should look something like this: Now you're ready to move on to the next step, committing your changes to GitHub .","title":"Build a new term"},{"location":"contributing-content/terms/new.html#build-a-new-term","text":"In this tutorial, we will use VS Code but if you prefer, you can use any other editor or even command line tools.","title":"Build a new term"},{"location":"contributing-content/terms/new.html#step-1-clone-the-repository","text":"Bring up the Command Palette ( command shift P ) Type git clone When asked to provide repository URL, paste https://github.com/DHRI-Curriculum/glossary/ into the box. VS Code will ask you where to save your local clone of the repository. Choose wherever you would like to have it. When asked \"Would you like to open the cloned repository?\", press \"Open in New Window\" (to ensure no conflict with any other windows you may have open).","title":"Step 1. Clone the repository."},{"location":"contributing-content/terms/new.html#step-2-create-your-own-branch","text":"In the lower-left corner of the VS Code's window, click on the branch name that you are currently working on (likely \"main\"): In the menu that pops up, select \"Create new branch from...\": Next, provide a branch name for your new branch (following our style guide , choose something along the lines of v2.0-<your-username>-suggested-terms ). Then press enter to create the new branch: You should then be asked to \"Select a ref to create\" in relation to your branch. In this example above, since our desired upstream is the v2.0 branch, you will select origin/v2.0 : You should now be on your own branch of this repository. You can verify that you're on the correct branch by checking your lower-left corner that should have your branch name instead of the formerly active branch.","title":"Step 2. Create your own branch."},{"location":"contributing-content/terms/new.html#step-3-add-the-terms-you-believe-should-be-added-to-the-terms-folder","text":"Before you start to add content to your editing branch, make sure you're adding terms to the correct folder, terms inside the repository. The term should be in its own, separate <term>.md file. Keep the filename lowercase and replace spaces with '-'. Note that there is a template for term.md available to make the following easier to follow. Add the term as the first header in the file ( # <term> ) In the first paragraph after the first header, add the explanation of the term. (Optional) Add a section ## Readings where you add a bulletpoint for each reading you think is valuable to grasp the term that you want to add to the glossary. (Optional) Add a section ## Tutorials where you add a bulletpoint for each tutorial you think is valuable to grasp the term that you want to add to the glossary. (Optional) Add a section ## Cheat sheets where you add a bulletpoint for each cheat sheet you think is good for the learner to know about to be able to understand the term. Once you are done with all of the terms you would like to add , your VS Code should look something like this: Now you're ready to move on to the next step, committing your changes to GitHub .","title":"Step 3. Add the term(s) you believe should be added to the terms folder"},{"location":"contributing-content/terms/file-templates/term.html","text":"Template for term.md \u00b6 Create a file named <term>.md (replace <term> with your term in all-lowercase, and - replacing any spaces in the term). Put the file inside the terms directory in a new editing branch for the glossary repository. Inside the file, copy and paste the following markdown and edit as you see fit. Note that the Readings , Tutorials , and Cheat sheets headings are all optional. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # <term> Add the explanation of the term in this first paragraph, and then use as many paragraphs as you need. ## Readings - Author, [ Reading Title ]( https://reading.com ) Explanatory text here about why it's a good reading to embark on to learn more about the term. ## Tutorials - [ Tutorial title ]( https://reading.com ) Explanatory text here about why we think this is a good tutorial to take on in order to better understand the term. ## Cheat sheets - [ Cheat sheet name ]( https://cheat-sheet-link.com ) Explanatory text here.","title":"term.md"},{"location":"contributing-content/terms/file-templates/term.html#template-for-termmd","text":"Create a file named <term>.md (replace <term> with your term in all-lowercase, and - replacing any spaces in the term). Put the file inside the terms directory in a new editing branch for the glossary repository. Inside the file, copy and paste the following markdown and edit as you see fit. Note that the Readings , Tutorials , and Cheat sheets headings are all optional. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # <term> Add the explanation of the term in this first paragraph, and then use as many paragraphs as you need. ## Readings - Author, [ Reading Title ]( https://reading.com ) Explanatory text here about why it's a good reading to embark on to learn more about the term. ## Tutorials - [ Tutorial title ]( https://reading.com ) Explanatory text here about why we think this is a good tutorial to take on in order to better understand the term. ## Cheat sheets - [ Cheat sheet name ]( https://cheat-sheet-link.com ) Explanatory text here.","title":"Template for term.md"},{"location":"contributing-content/workshops/new.html","text":"Creating a new workshop \u00b6 For all the content files , easily accessible (and for copying and pasting) templates are available here: image.md frontmatter.md lessons.md theory-to-practice.md Warning NOTE : The README.md file and sections directory are generated using a Python script and should therefore not be edited. To be clear: any content in the README.md file or any files in the sections directory will be overwritten (without any approval/prompt). 1. Navigate to https://github.com/new in order to create a new repository \u00b6 Repository name (suggestion): name it like we\u2019ve named the other workshops, using a shorthand (i.e. not introduction-to-javascript but rather just javascript ) Description : No need for description at this point. If you want to, you can fill it out along this format: @DHRI-Curriculum Session on ______, <Extremely short explanation of the content of the workshop>. Public : Keep the visibility as public. Initialize this repository with : (keep all off) 2. Keep the confirmation page open \u00b6 Keep the confirmation page open. Or you can copy the section ...or push an existing repository from the command line to keep it handy. 3. Open a terminal and navigate to the directory where you want to keep your workshop directory. \u00b6 In my case, I want it inside my Repositories directory in my user folder: 1 $ cd ~/Repositories 1 $ mkdir javascript 1 2 3 4 5 6 7 $ cd javascript ` ## 4. Add a reference to the GitHub repository ``` sh $ git init Copy the link from the confirmation page: 1 $ git remote add origin git@github.com:username/workshop-name.git Switch to the main branch: 1 $ git branch -M main 5. Add the localdjango component to the workshop \u00b6 localdjango is a little Python program that automatically generates the README.md and the sections content for each workshop, to make a nice little visible and usable fall-back option, in case the curriculum.dhinstitutes.org site is down, for instance. Or for anyone who comes across our content on GitHub. First add the submodule: 1 $ git submodule add https://github.com/DHRI-Curriculum/localdjango 1 $ git submodule init Just to make sure, run a submodule update command as well: 1 $ git submodule update 6. Add the basic setup of content files for the workshop. \u00b6 I like to work in VS Code, so I fire that up by using: 1 $ code . In the directory, add the content files for the workshop : frontmatter.md , lessons.md , and theory-to-practice.md 7. Add the image for the workshop. \u00b6 In the directory, add the meta files and directories for the workshop : image.md and the directory _django-meta . In the image.md file, add one line on the top of the file, containing the image and the alt-text as follows: ![Header image for the Introduction to JavaScript workshop](https://raw.githubusercontent.com/DHRI-Curriculum/javascript/v2.0/\\_django-meta/header%403x.png) Note that you may need to go in and adjust the link to the image after you\u2019ve added the files to your repository, unless you can guess the githubusercontent.com URI from the pattern above. Inside the _django-meta directory, add the PNG file for the header (which will populate the Curriculum site), called header@3x.png and of the size 610 x 1994px. 8. Time to add the content, starting with frontmatter.md \u00b6 Here, we\u2019ll start with frontmatter.md but you can start with any of the files (see point 9 and 10 below) Note that there is a template for frontmatter.md available to make the following easier to follow. Add header level 1 with the name of the workshop: # Introduction to JavaScript Add header level 2: ## Abstract and underneath it, an abstract for the workshop. Add header level 2: ## Learning Objectives and underneath it a bullet point list ( - _____ ) of each of the learning objectives. (No need to add any other text here, it will be added automatically under the step below where we run localdjango .) Add header level 2: ## Estimated time with content that follows the.format \u201c4 hours\u201d \u2014 no need for punctuation. Add header level 2: ## Prerequisites with content in bullet point form ( - _____ ) that follows any of the following three examples: Each of the bullet points need to contain either \u201crequired\u201d or \u201crecommended\u201d as per the examples below. If you want to add a workshop prerequisite: 1 [ Introduction to the Command Line ]( https://www.github.com/DHRI-Curriculum/command-line ) (required) This workshop makes reference to concepts from the Command Line workshop, and having some knowledge about how to use the command line will be central for anyone who wants to learn about ___________. If you want to add a software installation prerequisite: 1 [ Visual Studio Code ]( https://github.com/DHRI-Curriculum/install/blob/v2.0/guides/visual-studio-code.md ) (recommended) You can use any plain text editor but for our purposes, Visual Studio Code (\"VS Code\") will be used. If you want to add an external link prerequisite: 1 [ Create a GitHub account ]( https://github.com/join ) (required) You need to have a GitHub account for the purposes of this workshop. It is free to sign up via this link. If you want to add a download from the repository as a prerequisite, you need to use an absolute URI to the githubusercontent.com domain: 1 [ Download the workshop dataset ]( https://raw.githubusercontent.com/DHRI-Curriculum/data-literacies/v2.0/files/moSmall.csv ) (required) The dataset, `moSmall.csv` , will be used throughout the challenges in the workshop. To save the file to your local computer, right click on the \"Download the workshop dataset\" link and choose `Save Link As...` . Note: It is important to make sure your file is saved as a `.csv` file. Add a level 2 header: ## Contexts Under the \u201cContexts\u201d header, add a level 3 header: ### Pre-reading suggestions with any recommended preceding suggestions. All reading suggestions should be added as a bulletpoint list, with a hyperlink with a clear explanatory text as its text element. After the reference, you can also add any other explanatory text that you may want. Under the \u201cContexts\u201d header, add a level 3 header: ### Projects that use these skills with any recommended projects to look at, which use the skills detailed in the workshop. All projects should be added as a bulletpoint list, with a hyperlink with a clear explanatory text as its text element. After the reference, you can also add any other explanatory text that you may want. Under the \u201cContexts\u201d header, add a level 3 header: ### Ethical Considerations with any ethical consideration to take into consideration for learners in the workshop. If you want to have a hyperlink, you can do so. Just remember that the hyperlink should have a clear explanatory text as its text element. Under the \u201cContexts\u201d header, add a level 3 header: ### Datasets with any datasets that the learner may want to access for the workshop\u2019s purposes. All datasets should be added as a bulletpoint list, with a hyperlink with a clear explanatory text as its text element. After the reference, you can also add any other explanatory text that you may want. Under the \u201cContexts\u201d header, add a level 3 header: ### Cheat Sheets with any cheat sheets that the learner may want to access for the workshop\u2019s purposes. All cheat sheets should be added as a bulletpoint list, with a hyperlink with a clear explanatory text as its text element. After the reference, you can also add any other explanatory text that you may want. Add a level 2 header: ## Acknowledgements where you add, as content, each of the current and past contributors to the workshop: Each should be added as a bulletpoint list. Name should be the text hyperlinked (if a hyperlink is added) and the name should be preceded by the category of contribution, whether it\u2019s a \u201ccurrent\u201d or a \u201cpast\u201d contribution, followed by a colon. The preference of a hyperlink is to the person\u2019s GitHub profile, but other links are also doable. Some examples: 1 2 3 4 5 6 - Current author: [ Di Yoong ]( https://github.com/dyoong ) - Past contributing author: [ Stephen Zweibel ]( https://github.com/szweibel ) - Past reviewer: [ Stefano Morello ]( https://github.com/smorello87 ) - Past reviewer: [ Filipa Calado ]( https://github.com/gofilipa ) - Current editor: [ Lisa Rhody ]( https://github.com/lmrhody ) - Current editor: [ Kalle Westerling ]( https://github.com/kallewesterling ) 9. Time to add content to lessons.md \u00b6 Note that there is a template for lessons.md available to make the following easier to follow. Add each of the lessons, unnumbered, as a level 1 heading, with any subsequent headers as level 2 headers. 1 2 3 4 5 6 7 # Getting to know your browser What's really nice about JavaScript is that you can get started this very minute. Try it! Go to the `View` menu in the menubar and under the `Developer` submenu, choose \"JavaScript Console.\" You should see `>` which we call a \"prompt\" and you may have encountered in other workshops here, like our [ Python ]( http://www.github.com/DHRI-Curriculum/python ) or [ Command Line ]( http://www.github.com/DHRI-Curriculum/command-line ) workshops. ## Playing with the prompt Let's write `alert(\"Hello world!\")` followed by pressing the `Enter` button on your keyboard. For each lesson, add a level 2 section for ## Evaluation , where you write multiple-choice or open-ended questions on the material in the lesson. An open-ended question should just be on its own line: 1 2 3 ## Evaluation How does JavaScript seem different than Python? What do you think the benefits are of learning foundational skills about any given programming language? A multiple-choice question should be formulated on its own line, followed by a bulletpoint list of options, where the correct one(s) are marked with a star directly following the correct answer(s): 1 2 3 4 5 6 7 ## Evaluation Which of the following sentences is correct: - A prompt is a smiley-face. - The prompt helps us perform simple one-line commands.* - The prompt can run long program sequences. For each lesson, add a level 2 section for ## Keywords Start this section with a single-statement on one line: \u201cDo you remember the glossary terms from this section?\u201d Follow this line with a bulletpoint list of all any terms from the lesson that exist in the glossary repository\u2019s (branch v2.0 ) [ terms ] directory, where a full bulletpoint looks like this: 1 - [ Prompt ]( https://github.com/DHRI-Curriculum/glossary/blob/v2.0/terms/prompt.md ) If your lesson has a challenge, add it as a level 2 section: ## Challenge If you want to use a subheader, you can do by adding a colon after \u201cChallenge\u201d: ## Challenge: A real challenge for a superuser In the following paragraph(s), you can use level 3 headers, if you need to, and any styled markdown. If your challenge has a solution, it should follow the same pattern as the challenge above. A level 2-header, that may or may not have a subheader: ## Solution or ## Solution: We have solved it for you The solution\u2019s following paragraph(s), cal also use level 3 headers, if you need to, and any styled markdown. 10. Time to add content to theory-to-practice.md \u00b6 Note that there is a template for theory-to-practice.md available to make the following easier to follow. Start with a level 1 heading, # Theory to Practice with the following paragraph(s) being a congratulatory message to the learner who has now completed the workshop. It could summarize a bit what the journey has been like, why the skill matters in the world, and where the technology is at right now. Add a level 2 header, ## Suggested Further Readings , with any recommended further readings to look at, which describe the skills detailed in the workshop. All readings should be added as a bulletpoint list, with a hyperlink with a clear explanatory text as its text element. After the reference, you can also add any other explanatory text that you may want. Add a level 2 header, ## Other Tutorials , with any recommended other tutorials the learner may want to look at, which helps them understand the skills detailed in the workshop. All tutorials should be added as a bulletpoint list, with a hyperlink with a clear explanatory text as its text element. After the reference, you can also add any other explanatory text that you may want. Add a level 2 header, ## Projects or Challenges to Try , with any recommended projects or challenges to look at, which use the skills detailed in the workshop. All projects/challenges should be added as a bulletpoint list, with a hyperlink with a clear explanatory text as its text element. After the reference, you can also add any other explanatory text that you may want. Add a level 2 header, Discussion Questions , which provides some open-ended advanced-level question about how the learner\u2019s research projects might benefit from the skill, what its limits are, pitfalls with using this versus other skills, how they could use it in teaching, etc. 11. Run localdjango \u00b6 As it should be initialized in step 5 above, now, after our content is in place (step 7\u201310), we can follow these steps: 1 $ python localdjango/setup.py It will ask you some questions, but for the most part, the answers are automatically generated from your content. Once the script finishes, you should have a README.md file and a sections directory in the repository. 12. Synchronize with git \u00b6 Now we're ready to synchronize the repository with git. You can use VS Code and do it using the application's GitHub extension ...or run the commands on the command line: git add * git commit -m 'Updating from local files.' git push","title":"Build a new workshop"},{"location":"contributing-content/workshops/new.html#creating-a-new-workshop","text":"For all the content files , easily accessible (and for copying and pasting) templates are available here: image.md frontmatter.md lessons.md theory-to-practice.md Warning NOTE : The README.md file and sections directory are generated using a Python script and should therefore not be edited. To be clear: any content in the README.md file or any files in the sections directory will be overwritten (without any approval/prompt).","title":"Creating a new workshop"},{"location":"contributing-content/workshops/new.html#1-navigate-to-httpsgithubcomnew-in-order-to-create-a-new-repository","text":"Repository name (suggestion): name it like we\u2019ve named the other workshops, using a shorthand (i.e. not introduction-to-javascript but rather just javascript ) Description : No need for description at this point. If you want to, you can fill it out along this format: @DHRI-Curriculum Session on ______, <Extremely short explanation of the content of the workshop>. Public : Keep the visibility as public. Initialize this repository with : (keep all off)","title":"1. Navigate to https://github.com/new in order to create a new repository"},{"location":"contributing-content/workshops/new.html#2-keep-the-confirmation-page-open","text":"Keep the confirmation page open. Or you can copy the section ...or push an existing repository from the command line to keep it handy.","title":"2. Keep the confirmation page open"},{"location":"contributing-content/workshops/new.html#3-open-a-terminal-and-navigate-to-the-directory-where-you-want-to-keep-your-workshop-directory","text":"In my case, I want it inside my Repositories directory in my user folder: 1 $ cd ~/Repositories 1 $ mkdir javascript 1 2 3 4 5 6 7 $ cd javascript ` ## 4. Add a reference to the GitHub repository ``` sh $ git init Copy the link from the confirmation page: 1 $ git remote add origin git@github.com:username/workshop-name.git Switch to the main branch: 1 $ git branch -M main","title":"3. Open a terminal and navigate to the directory where you want to keep your workshop directory."},{"location":"contributing-content/workshops/new.html#5-add-the-localdjango-component-to-the-workshop","text":"localdjango is a little Python program that automatically generates the README.md and the sections content for each workshop, to make a nice little visible and usable fall-back option, in case the curriculum.dhinstitutes.org site is down, for instance. Or for anyone who comes across our content on GitHub. First add the submodule: 1 $ git submodule add https://github.com/DHRI-Curriculum/localdjango 1 $ git submodule init Just to make sure, run a submodule update command as well: 1 $ git submodule update","title":"5. Add the localdjango component to the workshop"},{"location":"contributing-content/workshops/new.html#6-add-the-basic-setup-of-content-files-for-the-workshop","text":"I like to work in VS Code, so I fire that up by using: 1 $ code . In the directory, add the content files for the workshop : frontmatter.md , lessons.md , and theory-to-practice.md","title":"6. Add the basic setup of content files for the workshop."},{"location":"contributing-content/workshops/new.html#7-add-the-image-for-the-workshop","text":"In the directory, add the meta files and directories for the workshop : image.md and the directory _django-meta . In the image.md file, add one line on the top of the file, containing the image and the alt-text as follows: ![Header image for the Introduction to JavaScript workshop](https://raw.githubusercontent.com/DHRI-Curriculum/javascript/v2.0/\\_django-meta/header%403x.png) Note that you may need to go in and adjust the link to the image after you\u2019ve added the files to your repository, unless you can guess the githubusercontent.com URI from the pattern above. Inside the _django-meta directory, add the PNG file for the header (which will populate the Curriculum site), called header@3x.png and of the size 610 x 1994px.","title":"7. Add the image for the workshop."},{"location":"contributing-content/workshops/new.html#8-time-to-add-the-content-starting-with-frontmattermd","text":"Here, we\u2019ll start with frontmatter.md but you can start with any of the files (see point 9 and 10 below) Note that there is a template for frontmatter.md available to make the following easier to follow. Add header level 1 with the name of the workshop: # Introduction to JavaScript Add header level 2: ## Abstract and underneath it, an abstract for the workshop. Add header level 2: ## Learning Objectives and underneath it a bullet point list ( - _____ ) of each of the learning objectives. (No need to add any other text here, it will be added automatically under the step below where we run localdjango .) Add header level 2: ## Estimated time with content that follows the.format \u201c4 hours\u201d \u2014 no need for punctuation. Add header level 2: ## Prerequisites with content in bullet point form ( - _____ ) that follows any of the following three examples: Each of the bullet points need to contain either \u201crequired\u201d or \u201crecommended\u201d as per the examples below. If you want to add a workshop prerequisite: 1 [ Introduction to the Command Line ]( https://www.github.com/DHRI-Curriculum/command-line ) (required) This workshop makes reference to concepts from the Command Line workshop, and having some knowledge about how to use the command line will be central for anyone who wants to learn about ___________. If you want to add a software installation prerequisite: 1 [ Visual Studio Code ]( https://github.com/DHRI-Curriculum/install/blob/v2.0/guides/visual-studio-code.md ) (recommended) You can use any plain text editor but for our purposes, Visual Studio Code (\"VS Code\") will be used. If you want to add an external link prerequisite: 1 [ Create a GitHub account ]( https://github.com/join ) (required) You need to have a GitHub account for the purposes of this workshop. It is free to sign up via this link. If you want to add a download from the repository as a prerequisite, you need to use an absolute URI to the githubusercontent.com domain: 1 [ Download the workshop dataset ]( https://raw.githubusercontent.com/DHRI-Curriculum/data-literacies/v2.0/files/moSmall.csv ) (required) The dataset, `moSmall.csv` , will be used throughout the challenges in the workshop. To save the file to your local computer, right click on the \"Download the workshop dataset\" link and choose `Save Link As...` . Note: It is important to make sure your file is saved as a `.csv` file. Add a level 2 header: ## Contexts Under the \u201cContexts\u201d header, add a level 3 header: ### Pre-reading suggestions with any recommended preceding suggestions. All reading suggestions should be added as a bulletpoint list, with a hyperlink with a clear explanatory text as its text element. After the reference, you can also add any other explanatory text that you may want. Under the \u201cContexts\u201d header, add a level 3 header: ### Projects that use these skills with any recommended projects to look at, which use the skills detailed in the workshop. All projects should be added as a bulletpoint list, with a hyperlink with a clear explanatory text as its text element. After the reference, you can also add any other explanatory text that you may want. Under the \u201cContexts\u201d header, add a level 3 header: ### Ethical Considerations with any ethical consideration to take into consideration for learners in the workshop. If you want to have a hyperlink, you can do so. Just remember that the hyperlink should have a clear explanatory text as its text element. Under the \u201cContexts\u201d header, add a level 3 header: ### Datasets with any datasets that the learner may want to access for the workshop\u2019s purposes. All datasets should be added as a bulletpoint list, with a hyperlink with a clear explanatory text as its text element. After the reference, you can also add any other explanatory text that you may want. Under the \u201cContexts\u201d header, add a level 3 header: ### Cheat Sheets with any cheat sheets that the learner may want to access for the workshop\u2019s purposes. All cheat sheets should be added as a bulletpoint list, with a hyperlink with a clear explanatory text as its text element. After the reference, you can also add any other explanatory text that you may want. Add a level 2 header: ## Acknowledgements where you add, as content, each of the current and past contributors to the workshop: Each should be added as a bulletpoint list. Name should be the text hyperlinked (if a hyperlink is added) and the name should be preceded by the category of contribution, whether it\u2019s a \u201ccurrent\u201d or a \u201cpast\u201d contribution, followed by a colon. The preference of a hyperlink is to the person\u2019s GitHub profile, but other links are also doable. Some examples: 1 2 3 4 5 6 - Current author: [ Di Yoong ]( https://github.com/dyoong ) - Past contributing author: [ Stephen Zweibel ]( https://github.com/szweibel ) - Past reviewer: [ Stefano Morello ]( https://github.com/smorello87 ) - Past reviewer: [ Filipa Calado ]( https://github.com/gofilipa ) - Current editor: [ Lisa Rhody ]( https://github.com/lmrhody ) - Current editor: [ Kalle Westerling ]( https://github.com/kallewesterling )","title":"8. Time to add the content, starting with frontmatter.md"},{"location":"contributing-content/workshops/new.html#9-time-to-add-content-to-lessonsmd","text":"Note that there is a template for lessons.md available to make the following easier to follow. Add each of the lessons, unnumbered, as a level 1 heading, with any subsequent headers as level 2 headers. 1 2 3 4 5 6 7 # Getting to know your browser What's really nice about JavaScript is that you can get started this very minute. Try it! Go to the `View` menu in the menubar and under the `Developer` submenu, choose \"JavaScript Console.\" You should see `>` which we call a \"prompt\" and you may have encountered in other workshops here, like our [ Python ]( http://www.github.com/DHRI-Curriculum/python ) or [ Command Line ]( http://www.github.com/DHRI-Curriculum/command-line ) workshops. ## Playing with the prompt Let's write `alert(\"Hello world!\")` followed by pressing the `Enter` button on your keyboard. For each lesson, add a level 2 section for ## Evaluation , where you write multiple-choice or open-ended questions on the material in the lesson. An open-ended question should just be on its own line: 1 2 3 ## Evaluation How does JavaScript seem different than Python? What do you think the benefits are of learning foundational skills about any given programming language? A multiple-choice question should be formulated on its own line, followed by a bulletpoint list of options, where the correct one(s) are marked with a star directly following the correct answer(s): 1 2 3 4 5 6 7 ## Evaluation Which of the following sentences is correct: - A prompt is a smiley-face. - The prompt helps us perform simple one-line commands.* - The prompt can run long program sequences. For each lesson, add a level 2 section for ## Keywords Start this section with a single-statement on one line: \u201cDo you remember the glossary terms from this section?\u201d Follow this line with a bulletpoint list of all any terms from the lesson that exist in the glossary repository\u2019s (branch v2.0 ) [ terms ] directory, where a full bulletpoint looks like this: 1 - [ Prompt ]( https://github.com/DHRI-Curriculum/glossary/blob/v2.0/terms/prompt.md ) If your lesson has a challenge, add it as a level 2 section: ## Challenge If you want to use a subheader, you can do by adding a colon after \u201cChallenge\u201d: ## Challenge: A real challenge for a superuser In the following paragraph(s), you can use level 3 headers, if you need to, and any styled markdown. If your challenge has a solution, it should follow the same pattern as the challenge above. A level 2-header, that may or may not have a subheader: ## Solution or ## Solution: We have solved it for you The solution\u2019s following paragraph(s), cal also use level 3 headers, if you need to, and any styled markdown.","title":"9. Time to add content to lessons.md"},{"location":"contributing-content/workshops/new.html#10-time-to-add-content-to-theory-to-practicemd","text":"Note that there is a template for theory-to-practice.md available to make the following easier to follow. Start with a level 1 heading, # Theory to Practice with the following paragraph(s) being a congratulatory message to the learner who has now completed the workshop. It could summarize a bit what the journey has been like, why the skill matters in the world, and where the technology is at right now. Add a level 2 header, ## Suggested Further Readings , with any recommended further readings to look at, which describe the skills detailed in the workshop. All readings should be added as a bulletpoint list, with a hyperlink with a clear explanatory text as its text element. After the reference, you can also add any other explanatory text that you may want. Add a level 2 header, ## Other Tutorials , with any recommended other tutorials the learner may want to look at, which helps them understand the skills detailed in the workshop. All tutorials should be added as a bulletpoint list, with a hyperlink with a clear explanatory text as its text element. After the reference, you can also add any other explanatory text that you may want. Add a level 2 header, ## Projects or Challenges to Try , with any recommended projects or challenges to look at, which use the skills detailed in the workshop. All projects/challenges should be added as a bulletpoint list, with a hyperlink with a clear explanatory text as its text element. After the reference, you can also add any other explanatory text that you may want. Add a level 2 header, Discussion Questions , which provides some open-ended advanced-level question about how the learner\u2019s research projects might benefit from the skill, what its limits are, pitfalls with using this versus other skills, how they could use it in teaching, etc.","title":"10. Time to add content to theory-to-practice.md"},{"location":"contributing-content/workshops/new.html#11-run-localdjango","text":"As it should be initialized in step 5 above, now, after our content is in place (step 7\u201310), we can follow these steps: 1 $ python localdjango/setup.py It will ask you some questions, but for the most part, the answers are automatically generated from your content. Once the script finishes, you should have a README.md file and a sections directory in the repository.","title":"11. Run localdjango"},{"location":"contributing-content/workshops/new.html#12-synchronize-with-git","text":"Now we're ready to synchronize the repository with git. You can use VS Code and do it using the application's GitHub extension ...or run the commands on the command line: git add * git commit -m 'Updating from local files.' git push","title":"12. Synchronize with git"},{"location":"contributing-content/workshops/file-templates/frontmatter.html","text":"Template for frontmatter.md \u00b6 Create a file named frontmatter.md in the root of your workshop's repository. Inside the file, copy and paste the following markdown and edit as you see fit. Note that none of the headings are optional but must be present, even if they are empty. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 # Name of Workshop ## Abstract Eiusmod sunt reprehenderit ex ullamco sunt incididunt voluptate elit pariatur esse officia et ex ipsum. Sint id elit labore amet eu laborum. Excepteur voluptate incididunt ex anim et laboris. Magna Lorem non ex sint enim officia ad velit quis aute fugiat velit ad eiusmod. Ex commodo ad deserunt excepteur et duis. Do et pariatur excepteur cillum cillum Lorem laborum id. Dolor laboris officia consectetur esse proident. ## Learning Objectives - active verb starts the learning objective. - active verb starts the learning objective. - active verb starts the learning objective. - active verb starts the learning objective. ## Estimated time 4 hours. ## Prerequisites - [ Workshop title ]( https://www.github.com/DHRI-Curriculum/workshop ) (required/recommended -- choose one) Descriptive text of why this is a prerequisite. - [ Software name ]( https://www.github.com/DHRI-Curriculum/install/blob/v2.0/guides/file-name-for-install-instructions.md ) (required/recommended -- choose one) Descriptive text of why this is a prerequisite. - [ External link's name ]( https://any-external-link.com ) (required/recommended -- choose one) Descriptive text of why this is a prerequisite. - [ Download the workshop dataset ]( https://raw.githubusercontent.com/DHRI-Curriculum/workshop/v2.0/folder/file.zip ) (required/recommended -- choose one) Descriptive text of why this is a prerequisite. ## Contexts ### Pre-reading suggestions - Author, [ Reading Title ]( https://reading.com ) Explanatory text here. ### Projects that use these skills - [ Project name ]( https://project.com ) Explanatory text here. ### Ethical considerations - Ethical consideration, number one. Does not need to have a link. - Ethical consideration, number one. This one, however, does have a [ descriptive text element ]( https://ethical-link.com ) for its link. ### Datasets - [ Dataset name ]( https://dataset.com ) Explanatory text here. ### Cheat sheets - [ Cheat sheet name ]( https://cheat-sheet-link.com ) Explanatory text here. ## Acknowledgements - Current author: [ Name ]( https://github.com/username-on-github ) - Past contributing author: [ Name ]( https://github.com/username-on-github ) - Past reviewer: [ Name ]( https://github.com/username-on-github ) - Current editor: [ Name ]( https://github.com/username-on-github ) - Current editor: [ Name ]( https://github.com/username-on-github )","title":"frontmatter.md"},{"location":"contributing-content/workshops/file-templates/frontmatter.html#template-for-frontmattermd","text":"Create a file named frontmatter.md in the root of your workshop's repository. Inside the file, copy and paste the following markdown and edit as you see fit. Note that none of the headings are optional but must be present, even if they are empty. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 # Name of Workshop ## Abstract Eiusmod sunt reprehenderit ex ullamco sunt incididunt voluptate elit pariatur esse officia et ex ipsum. Sint id elit labore amet eu laborum. Excepteur voluptate incididunt ex anim et laboris. Magna Lorem non ex sint enim officia ad velit quis aute fugiat velit ad eiusmod. Ex commodo ad deserunt excepteur et duis. Do et pariatur excepteur cillum cillum Lorem laborum id. Dolor laboris officia consectetur esse proident. ## Learning Objectives - active verb starts the learning objective. - active verb starts the learning objective. - active verb starts the learning objective. - active verb starts the learning objective. ## Estimated time 4 hours. ## Prerequisites - [ Workshop title ]( https://www.github.com/DHRI-Curriculum/workshop ) (required/recommended -- choose one) Descriptive text of why this is a prerequisite. - [ Software name ]( https://www.github.com/DHRI-Curriculum/install/blob/v2.0/guides/file-name-for-install-instructions.md ) (required/recommended -- choose one) Descriptive text of why this is a prerequisite. - [ External link's name ]( https://any-external-link.com ) (required/recommended -- choose one) Descriptive text of why this is a prerequisite. - [ Download the workshop dataset ]( https://raw.githubusercontent.com/DHRI-Curriculum/workshop/v2.0/folder/file.zip ) (required/recommended -- choose one) Descriptive text of why this is a prerequisite. ## Contexts ### Pre-reading suggestions - Author, [ Reading Title ]( https://reading.com ) Explanatory text here. ### Projects that use these skills - [ Project name ]( https://project.com ) Explanatory text here. ### Ethical considerations - Ethical consideration, number one. Does not need to have a link. - Ethical consideration, number one. This one, however, does have a [ descriptive text element ]( https://ethical-link.com ) for its link. ### Datasets - [ Dataset name ]( https://dataset.com ) Explanatory text here. ### Cheat sheets - [ Cheat sheet name ]( https://cheat-sheet-link.com ) Explanatory text here. ## Acknowledgements - Current author: [ Name ]( https://github.com/username-on-github ) - Past contributing author: [ Name ]( https://github.com/username-on-github ) - Past reviewer: [ Name ]( https://github.com/username-on-github ) - Current editor: [ Name ]( https://github.com/username-on-github ) - Current editor: [ Name ]( https://github.com/username-on-github )","title":"Template for frontmatter.md"},{"location":"contributing-content/workshops/file-templates/image.html","text":"Template for image.md \u00b6 Create a file named image.md in the root of your workshop's repository. Inside the file, copy and paste the following markdown and edit as you see fit. Please follow the guidelines below and only update the all-caps information in the markdown. 1 ![ Header image for the NAME OF WORKSHOP workshop ]( https://raw.githubusercontent.com/USER/REPOSITORY/BRANCH/\\_django-meta/header%403x.png ) Once you've added the image.md file, also make sure to add to your workshop's root directory, a folder called _django-meta and inside of it, add a file with the name header@3x.png that adheres to the image standard of the website. Preferably the image is of the size 610 x 1994px.","title":"image.md"},{"location":"contributing-content/workshops/file-templates/image.html#template-for-imagemd","text":"Create a file named image.md in the root of your workshop's repository. Inside the file, copy and paste the following markdown and edit as you see fit. Please follow the guidelines below and only update the all-caps information in the markdown. 1 ![ Header image for the NAME OF WORKSHOP workshop ]( https://raw.githubusercontent.com/USER/REPOSITORY/BRANCH/\\_django-meta/header%403x.png ) Once you've added the image.md file, also make sure to add to your workshop's root directory, a folder called _django-meta and inside of it, add a file with the name header@3x.png that adheres to the image standard of the website. Preferably the image is of the size 610 x 1994px.","title":"Template for image.md"},{"location":"contributing-content/workshops/file-templates/lessons.html","text":"Template for lessons.md \u00b6 Create a file named lessons.md in the root of your workshop's repository. Inside the file, copy and paste the following markdown and edit as you see fit. Note that each lesson is denoted by an opening level 1 heading ( # ) and can be followed by any subheaders of descending levels. The subheaders can not start with Evaluation , Keywords , Challenge or Solution as those are reserved for the optional headers adding to the interactivity of the website. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 # Lesson number one: They should not be numbered. Dolor minim nostrud ipsum dolor minim nisi minim duis sint sint consectetur proident quis velit. Elit duis eu laborum veniam quis magna deserunt amet est Lorem. Proident aliqua in velit consequat veniam irure reprehenderit incididunt do laborum tempor qui. Commodo minim est dolor do magna ullamco magna dolore ipsum culpa laborum voluptate esse elit. Consequat ullamco sunt ut laborum anim in consequat consectetur deserunt qui dolore proident. Ad occaecat aliquip incididunt dolore laboris et adipisicing occaecat exercitation laborum fugiat enim ea excepteur. Excepteur ea dolore consectetur ea eiusmod enim. Aliqua dolor magna labore tempor exercitation ut ut et Lorem aute do officia anim. Ea dolor incididunt laborum tempor laborum eu. Laboris consectetur laborum magna Lorem veniam mollit consectetur officia. Lorem aliquip id labore excepteur nisi id ea elit aute. Fugiat proident esse amet mollit dolor mollit tempor occaecat. Minim do culpa aute cupidatat. Pariatur cillum minim et sint et nisi mollit pariatur qui. ## You can have subheaders of level 2 Voluptate sunt non sint deserunt eiusmod voluptate eiusmod laborum qui consectetur dolor ad. Lorem adipisicing fugiat ullamco pariatur id proident fugiat elit eiusmod commodo nisi sit. Dolor labore aute dolor labore laborum labore veniam quis incididunt nisi qui sunt. Pariatur Lorem aute dolor dolore laboris nisi eu exercitation qui. Reprehenderit non enim ullamco fugiat nostrud minim commodo nisi officia duis aliquip elit. ## Evaluation An open-ended question should just be a one-liner like this, ending with a question mark? A multi-choice question could be, for instance: Which of the following sentences is correct: - Wrong alternative number one. - Correct alternative number one.* - Wrong alternative number two. - Correct alternative number two.* - Correct alternative number three.* ## Keywords Do you remember the glossary terms from this section? - [ Keyword ]( https://github.com/DHRI-Curriculum/glossary/blob/v2.0/terms/insert-keyword-here.md ) ## Challenge: A Challenge can also have its own header on the page, if you add it like this (you can also leave it as \"## Challenge\") If your lesson has a challenge, add it here. You can use level 3 headers, if you need to, and any styled markdown. ## Solution: This is how you add an optional header for your solution (you can also leave it as \"## Solution\") If your challenge has a solution, it should follow the same pattern as the challenge above. The solution\u2019s following paragraph(s), can also use level 3 headers, if you need to, and any styled markdown. # Lesson number two: They should not be numbered. ...and so one... # Lesson number three: They should not be numbered. ... # Lesson number four: They should not be numbered. ...","title":"lessons.md"},{"location":"contributing-content/workshops/file-templates/lessons.html#template-for-lessonsmd","text":"Create a file named lessons.md in the root of your workshop's repository. Inside the file, copy and paste the following markdown and edit as you see fit. Note that each lesson is denoted by an opening level 1 heading ( # ) and can be followed by any subheaders of descending levels. The subheaders can not start with Evaluation , Keywords , Challenge or Solution as those are reserved for the optional headers adding to the interactivity of the website. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 # Lesson number one: They should not be numbered. Dolor minim nostrud ipsum dolor minim nisi minim duis sint sint consectetur proident quis velit. Elit duis eu laborum veniam quis magna deserunt amet est Lorem. Proident aliqua in velit consequat veniam irure reprehenderit incididunt do laborum tempor qui. Commodo minim est dolor do magna ullamco magna dolore ipsum culpa laborum voluptate esse elit. Consequat ullamco sunt ut laborum anim in consequat consectetur deserunt qui dolore proident. Ad occaecat aliquip incididunt dolore laboris et adipisicing occaecat exercitation laborum fugiat enim ea excepteur. Excepteur ea dolore consectetur ea eiusmod enim. Aliqua dolor magna labore tempor exercitation ut ut et Lorem aute do officia anim. Ea dolor incididunt laborum tempor laborum eu. Laboris consectetur laborum magna Lorem veniam mollit consectetur officia. Lorem aliquip id labore excepteur nisi id ea elit aute. Fugiat proident esse amet mollit dolor mollit tempor occaecat. Minim do culpa aute cupidatat. Pariatur cillum minim et sint et nisi mollit pariatur qui. ## You can have subheaders of level 2 Voluptate sunt non sint deserunt eiusmod voluptate eiusmod laborum qui consectetur dolor ad. Lorem adipisicing fugiat ullamco pariatur id proident fugiat elit eiusmod commodo nisi sit. Dolor labore aute dolor labore laborum labore veniam quis incididunt nisi qui sunt. Pariatur Lorem aute dolor dolore laboris nisi eu exercitation qui. Reprehenderit non enim ullamco fugiat nostrud minim commodo nisi officia duis aliquip elit. ## Evaluation An open-ended question should just be a one-liner like this, ending with a question mark? A multi-choice question could be, for instance: Which of the following sentences is correct: - Wrong alternative number one. - Correct alternative number one.* - Wrong alternative number two. - Correct alternative number two.* - Correct alternative number three.* ## Keywords Do you remember the glossary terms from this section? - [ Keyword ]( https://github.com/DHRI-Curriculum/glossary/blob/v2.0/terms/insert-keyword-here.md ) ## Challenge: A Challenge can also have its own header on the page, if you add it like this (you can also leave it as \"## Challenge\") If your lesson has a challenge, add it here. You can use level 3 headers, if you need to, and any styled markdown. ## Solution: This is how you add an optional header for your solution (you can also leave it as \"## Solution\") If your challenge has a solution, it should follow the same pattern as the challenge above. The solution\u2019s following paragraph(s), can also use level 3 headers, if you need to, and any styled markdown. # Lesson number two: They should not be numbered. ...and so one... # Lesson number three: They should not be numbered. ... # Lesson number four: They should not be numbered. ...","title":"Template for lessons.md"},{"location":"contributing-content/workshops/file-templates/theory-to-practice.html","text":"Template for theory-to-practice.md \u00b6 Create a file named theory-to-practice.md in the root of your workshop's repository. Inside the file, copy and paste the following markdown and edit as you see fit. Note that none of the headings are optional but must be present, even if they are empty. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # Theory to Practice Congratulatory paragraph here to the learner who has now completed the workshop. It could summarize a bit what the journey has been like, why the skill matters in the world, and where the technology is at right now. ## Suggested Further Readings - Author, [ Reading Title ]( https://reading.com ) Explanatory text here about why it's a good reading to embark on after the workshop. ## Other Tutorials - [ Tutorial title ]( https://reading.com ) Explanatory text here about why we think this is a good tutorial to take on after our workshop. ## Projects or Challenges to Tru - [ Project/challenge name ]( https://project.com ) Explanatory text here about why it is a good challenge. ## Discussion Questions - some open-ended advanced-level question about - how the learner\u2019s research projects might benefit - from the skill, what its limits are, pitfalls with - using this versus other skills, how they could use - it in teaching, etc.","title":"theory-to-practice.md"},{"location":"contributing-content/workshops/file-templates/theory-to-practice.html#template-for-theory-to-practicemd","text":"Create a file named theory-to-practice.md in the root of your workshop's repository. Inside the file, copy and paste the following markdown and edit as you see fit. Note that none of the headings are optional but must be present, even if they are empty. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # Theory to Practice Congratulatory paragraph here to the learner who has now completed the workshop. It could summarize a bit what the journey has been like, why the skill matters in the world, and where the technology is at right now. ## Suggested Further Readings - Author, [ Reading Title ]( https://reading.com ) Explanatory text here about why it's a good reading to embark on after the workshop. ## Other Tutorials - [ Tutorial title ]( https://reading.com ) Explanatory text here about why we think this is a good tutorial to take on after our workshop. ## Projects or Challenges to Tru - [ Project/challenge name ]( https://project.com ) Explanatory text here about why it is a good challenge. ## Discussion Questions - some open-ended advanced-level question about - how the learner\u2019s research projects might benefit - from the skill, what its limits are, pitfalls with - using this versus other skills, how they could use - it in teaching, etc.","title":"Template for theory-to-practice.md"},{"location":"debugging/index.html","text":"Debugging the application \u00b6 XXXX","title":"Getting started with debug"},{"location":"debugging/index.html#debugging-the-application","text":"XXXX","title":"Debugging the application"},{"location":"debugging/check-environment-variables.html","text":"Check whether environment variables are correctly set up \u00b6 In order to check whether environment variables are correctly set up, you can check out the debug page: https://curriculum.dhinstitutes.org/shortcuts/debug/","title":"Check whether environment variables are correctly set up"},{"location":"debugging/check-environment-variables.html#check-whether-environment-variables-are-correctly-set-up","text":"In order to check whether environment variables are correctly set up, you can check out the debug page: https://curriculum.dhinstitutes.org/shortcuts/debug/","title":"Check whether environment variables are correctly set up"},{"location":"debugging/copy-remote-files.html","text":"Copy Remote Files For Debugging \u00b6 Sometimes, you might want to check out files from the curriculum site on your local machine. An easy way to copy over SSH is the following command. In this case, we want to investigate a preloaded yaml file (generated by the python manage.py buildworkshop --name git command): 1 ssh dhinstit@dhinstitutes.org 'cat curriculum.dhinstitutes.org/_preload/_workshops/git/git.yml' > /Users/kallewesterling/Downloads/git.yml If you want to make a copy of the current database for inspection, this is also a handy command: 1 ssh dhinstit@dhinstitutes.org 'cat curriculum.dhinstitutes.org/db.sqlite3' > /Users/kallewesterling/Downloads/db.sqlite3","title":"Copy remote files for debugging"},{"location":"debugging/copy-remote-files.html#copy-remote-files-for-debugging","text":"Sometimes, you might want to check out files from the curriculum site on your local machine. An easy way to copy over SSH is the following command. In this case, we want to investigate a preloaded yaml file (generated by the python manage.py buildworkshop --name git command): 1 ssh dhinstit@dhinstitutes.org 'cat curriculum.dhinstitutes.org/_preload/_workshops/git/git.yml' > /Users/kallewesterling/Downloads/git.yml If you want to make a copy of the current database for inspection, this is also a handy command: 1 ssh dhinstit@dhinstitutes.org 'cat curriculum.dhinstitutes.org/db.sqlite3' > /Users/kallewesterling/Downloads/db.sqlite3","title":"Copy Remote Files For Debugging"},{"location":"debugging/dropping-migration-files.html","text":"Dropping all migration files \u00b6 This might be needed to run during dev time: 1 $ find . -path \"*/migrations/*.py\" -not -name \"__init__.py\" -delete && find . -path \"*/migrations/*.pyc\" -delete && git pull","title":"Drop all migration files"},{"location":"debugging/dropping-migration-files.html#dropping-all-migration-files","text":"This might be needed to run during dev time: 1 $ find . -path \"*/migrations/*.py\" -not -name \"__init__.py\" -delete && find . -path \"*/migrations/*.pyc\" -delete && git pull","title":"Dropping all migration files"},{"location":"debugging/super-reset.html","text":"Perform a super-reset of the application \u00b6 When working to set up the application (local or in deployment), you may want to keep the following commands handy. Reset from server \u00b6 A good one-line command to have handy is the following: 1 $ python manage.py build && python manage.py ingest --reset --force Note that it will replace everything in the database with the live data from GitHub. Full reset \u00b6 This is another super-reset command: 1 $ python manage.py build && find . -path \"*/migrations/*.py\" -not -name \"__init__.py\" -delete && find . -path \"*/migrations/*.pyc\" -delete && rm db.sqlite3 && python manage.py makemigrations && python manage.py migrate && python manage.py ingest","title":"Super-reset"},{"location":"debugging/super-reset.html#perform-a-super-reset-of-the-application","text":"When working to set up the application (local or in deployment), you may want to keep the following commands handy.","title":"Perform a super-reset of the application"},{"location":"debugging/super-reset.html#reset-from-server","text":"A good one-line command to have handy is the following: 1 $ python manage.py build && python manage.py ingest --reset --force Note that it will replace everything in the database with the live data from GitHub.","title":"Reset from server"},{"location":"debugging/super-reset.html#full-reset","text":"This is another super-reset command: 1 $ python manage.py build && find . -path \"*/migrations/*.py\" -not -name \"__init__.py\" -delete && find . -path \"*/migrations/*.pyc\" -delete && rm db.sqlite3 && python manage.py makemigrations && python manage.py migrate && python manage.py ingest","title":"Full reset"},{"location":"debugging/under-the-hood/build.html","text":"The build command explained \u00b6 The build command is in fact a \"shortcut\" that actually runs a number of commands, which can also be run individually, in the correct order: buildgroups buildusers buildglossary buildinstalls buildinsights buildworkshop buildblurbs All of these can be placed in place of build on the command line above, like so: 1 2 3 $ python manage.py buildgroups $ python manage.py users $ python manage.py ...","title":"build"},{"location":"debugging/under-the-hood/build.html#the-build-command-explained","text":"The build command is in fact a \"shortcut\" that actually runs a number of commands, which can also be run individually, in the correct order: buildgroups buildusers buildglossary buildinstalls buildinsights buildworkshop buildblurbs All of these can be placed in place of build on the command line above, like so: 1 2 3 $ python manage.py buildgroups $ python manage.py users $ python manage.py ...","title":"The build command explained"},{"location":"debugging/under-the-hood/file-structure.html","text":"File structure explained \u00b6 Django's own tutorial does a good job of explaining the basic structure of a Django project. If you haven't worked in Django before, it is well worth a read. In this file, I want to detail some important folders and files in the django-app directory for developers. app directory \u00b6 This is an important directory as it contains all the central Django files, most centrally settings.py , which defined a lot of the project's basic set-up, such as which apps are installed. settings.py file \u00b6 Importantly, the settings.py file contains the algorithm that reads in the SECRET_KEY environment variable (with the backup solution of reading it from the file). It also contains the DEBUG setting, which should be turned to False but is currently (in our alpha-dev stage) still set to True , which exposes us to some security risks. It also contains the TEMPLATES['DIRS] variable, which ensures that all our templates can be located in the templates directory in the root of the repository. The settings.py file is also what defines the MySQL settings, once we want to move ahead with setting mySQL as the backend database solution rather than the sqlite file that currently serves as our database. This is also where you'll find the STATICFILE_DIRS","title":"File structure"},{"location":"debugging/under-the-hood/file-structure.html#file-structure-explained","text":"Django's own tutorial does a good job of explaining the basic structure of a Django project. If you haven't worked in Django before, it is well worth a read. In this file, I want to detail some important folders and files in the django-app directory for developers.","title":"File structure explained"},{"location":"debugging/under-the-hood/file-structure.html#app-directory","text":"This is an important directory as it contains all the central Django files, most centrally settings.py , which defined a lot of the project's basic set-up, such as which apps are installed.","title":"app directory"},{"location":"debugging/under-the-hood/file-structure.html#settingspy-file","text":"Importantly, the settings.py file contains the algorithm that reads in the SECRET_KEY environment variable (with the backup solution of reading it from the file). It also contains the DEBUG setting, which should be turned to False but is currently (in our alpha-dev stage) still set to True , which exposes us to some security risks. It also contains the TEMPLATES['DIRS] variable, which ensures that all our templates can be located in the templates directory in the root of the repository. The settings.py file is also what defines the MySQL settings, once we want to move ahead with setting mySQL as the backend database solution rather than the sqlite file that currently serves as our database. This is also where you'll find the STATICFILE_DIRS","title":"settings.py file"},{"location":"debugging/under-the-hood/ingest.html","text":"The ingest command explained \u00b6 Just like the build command, ingest is a \"shortcut\" that runs a number of commands, which can, just like the build commands parts, be run individually. The ingest command runs them all in the correct order: ingestgroups ingestusers ingestglossary ingestinstalls ingestinsights ingestworkshop ingestsnippets ingestblurbs ingestprerequisite","title":"ingest"},{"location":"debugging/under-the-hood/ingest.html#the-ingest-command-explained","text":"Just like the build command, ingest is a \"shortcut\" that runs a number of commands, which can, just like the build commands parts, be run individually. The ingest command runs them all in the correct order: ingestgroups ingestusers ingestglossary ingestinstalls ingestinsights ingestworkshop ingestsnippets ingestblurbs ingestprerequisite","title":"The ingest command explained"},{"location":"debugging/under-the-hood/localserver.html","text":"The localserver command explained \u00b6 Essentially the localserver command is Django's native runserver disguised with some specific settings. It runs with the IP address 0.0.0.0 on port 80 with ALLOWED_HOSTS having '*' as a value, in case it wasn't already there. The code, specifically, looks like this; 1 2 3 settings . ALLOWED_HOSTS . append ( '*' ) args = [ 'name' , 'runserver' , '0.0.0.0:80' ] execute_from_command_line ( args )","title":"localserver"},{"location":"debugging/under-the-hood/localserver.html#the-localserver-command-explained","text":"Essentially the localserver command is Django's native runserver disguised with some specific settings. It runs with the IP address 0.0.0.0 on port 80 with ALLOWED_HOSTS having '*' as a value, in case it wasn't already there. The code, specifically, looks like this; 1 2 3 settings . ALLOWED_HOSTS . append ( '*' ) args = [ 'name' , 'runserver' , '0.0.0.0:80' ] execute_from_command_line ( args )","title":"The localserver command explained"},{"location":"deployment/index.html","text":"Getting started with deploying the app to a site \u00b6 Currently, we only have instructions for how to deploy the app onto Reclaim Hosting's shared hosting . A future solution will include instructions for Reclaim Cloud as well.","title":"Getting started with deployment"},{"location":"deployment/index.html#getting-started-with-deploying-the-app-to-a-site","text":"Currently, we only have instructions for how to deploy the app onto Reclaim Hosting's shared hosting . A future solution will include instructions for Reclaim Cloud as well.","title":"Getting started with deploying the app to a site"},{"location":"deployment/reclaim-cloud/setup.html","text":"Deploy on Reclaim Cloud (draft) \u00b6 Note that these are not finished installation instructions. Step 1. Create environment and deploy the GitHub repository into the cloudlet. \u00b6 Step 2. Make sure that the virtual environment exists \u00b6 1 $ cd ~ 1 $ virtualenv virtenv 1 $ source virtenv/bin/activate 1 $ pip install -r ROOT/requirements.txt Step 3 (I believe this is necessary...): edit webroot/virtenv/bin/activate_this.py \u00b6 below os.environ[\"VIRTUAL_ENV\"] = base , add the following: 1 2 3 4 os . environ [ \"SECRET_KEY\" ] = '<insert secret key>' os . environ [ \"EMAIL_HOST_USER\" ] = '<insert email username>' os . environ [ \"EMAIL_HOST_PASSWORD\" ] = '<insert email password>' os . environ [ \"GITHUB_TOKEN\" ] = '<insert github token>' Step 4 (I believe this is necessary): webroot/virtenv/bin/activate \u00b6 below PATH=\"$VIRTUAL_ENV/bin:$PATH\" and export PATH , add the following: 1 2 3 4 export SECRET_KEY = '<insert secret key>' export EMAIL_HOST_USER = '<insert email username>' export EMAIL_HOST_PASSWORD = '<insert email password>' export GITHUB_TOKEN = '<insert github token>' Step 5: Edit /etc/httpd/conf.d/wsgi.conf \u00b6 It should look like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 Protocols h2 h2c http/1.1 WSGIDaemonProcess apache user=apache group=apache processes=2 threads=10 python-path=\"/var/www/webroot/virtenv/lib/python/:/var/www/webroot/\" home=\"/var/www/webroot/\" ServerRoot \"/var/www/webroot/\" DocumentRoot \"/var/www/webroot/\" User apache Group apache DefaultRuntimeDir \"/var/run\" ErrorLog \"/var/log/httpd/error_log\" CustomLog \"/var/log/httpd/access_log\" combined <Directory \"/var/www/webroot/\"> AllowOverride all Options -MultiViews </Directory> Alias /robots.txt /var/www/webroot/ROOT/robots.txt Alias /favicon.ico /var/www/webroot/ROOT/favicon.ico #Alias /images /var/www/webroot/ROOT/images #Alias /static /var/www/webroot/ROOT/static Alias /.well-known /var/www/webroot/ROOT/.well-known #WSGIScriptAlias / ${WSGI_SCRIPT} WSGISocketPrefix \"/tmp/wsgi\" WSGIPassAuthorization On #WSGIProcessGroup apache WSGIScriptAlias / /var/www/webroot/ROOT/app/wsgi.py WSGIPythonHome /var/www/webroot/.virtualenvs/env2 WSGIPythonPath /var/www/webroot/ROOT <Directory /var/www/webroot/ROOT/app> <Files wsgi.py> Order deny,allow Allow from all </Files> </Directory> Alias /media/ /var/www/webroot/ROOT/media/ Alias /static/ /var/www/webroot/ROOT/static/ <Directory /var/www/webroot/ROOT/static> Order deny,allow Allow from all </Directory> <Directory /var/www/webroot/ROOT/media> Order deny,allow Allow from all </Directory> Step 6: Restart httpd \u00b6 1 $ sudo service httpd restart","title":"Draft instructions"},{"location":"deployment/reclaim-cloud/setup.html#deploy-on-reclaim-cloud-draft","text":"Note that these are not finished installation instructions.","title":"Deploy on Reclaim Cloud (draft)"},{"location":"deployment/reclaim-cloud/setup.html#step-1-create-environment-and-deploy-the-github-repository-into-the-cloudlet","text":"","title":"Step 1. Create environment and deploy the GitHub repository into the cloudlet."},{"location":"deployment/reclaim-cloud/setup.html#step-2-make-sure-that-the-virtual-environment-exists","text":"1 $ cd ~ 1 $ virtualenv virtenv 1 $ source virtenv/bin/activate 1 $ pip install -r ROOT/requirements.txt","title":"Step 2. Make sure that the virtual environment exists"},{"location":"deployment/reclaim-cloud/setup.html#step-3-i-believe-this-is-necessary-edit-webrootvirtenvbinactivate_thispy","text":"below os.environ[\"VIRTUAL_ENV\"] = base , add the following: 1 2 3 4 os . environ [ \"SECRET_KEY\" ] = '<insert secret key>' os . environ [ \"EMAIL_HOST_USER\" ] = '<insert email username>' os . environ [ \"EMAIL_HOST_PASSWORD\" ] = '<insert email password>' os . environ [ \"GITHUB_TOKEN\" ] = '<insert github token>'","title":"Step 3 (I believe this is necessary...): edit webroot/virtenv/bin/activate_this.py"},{"location":"deployment/reclaim-cloud/setup.html#step-4-i-believe-this-is-necessary-webrootvirtenvbinactivate","text":"below PATH=\"$VIRTUAL_ENV/bin:$PATH\" and export PATH , add the following: 1 2 3 4 export SECRET_KEY = '<insert secret key>' export EMAIL_HOST_USER = '<insert email username>' export EMAIL_HOST_PASSWORD = '<insert email password>' export GITHUB_TOKEN = '<insert github token>'","title":"Step 4 (I believe this is necessary): webroot/virtenv/bin/activate"},{"location":"deployment/reclaim-cloud/setup.html#step-5-edit-etchttpdconfdwsgiconf","text":"It should look like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 Protocols h2 h2c http/1.1 WSGIDaemonProcess apache user=apache group=apache processes=2 threads=10 python-path=\"/var/www/webroot/virtenv/lib/python/:/var/www/webroot/\" home=\"/var/www/webroot/\" ServerRoot \"/var/www/webroot/\" DocumentRoot \"/var/www/webroot/\" User apache Group apache DefaultRuntimeDir \"/var/run\" ErrorLog \"/var/log/httpd/error_log\" CustomLog \"/var/log/httpd/access_log\" combined <Directory \"/var/www/webroot/\"> AllowOverride all Options -MultiViews </Directory> Alias /robots.txt /var/www/webroot/ROOT/robots.txt Alias /favicon.ico /var/www/webroot/ROOT/favicon.ico #Alias /images /var/www/webroot/ROOT/images #Alias /static /var/www/webroot/ROOT/static Alias /.well-known /var/www/webroot/ROOT/.well-known #WSGIScriptAlias / ${WSGI_SCRIPT} WSGISocketPrefix \"/tmp/wsgi\" WSGIPassAuthorization On #WSGIProcessGroup apache WSGIScriptAlias / /var/www/webroot/ROOT/app/wsgi.py WSGIPythonHome /var/www/webroot/.virtualenvs/env2 WSGIPythonPath /var/www/webroot/ROOT <Directory /var/www/webroot/ROOT/app> <Files wsgi.py> Order deny,allow Allow from all </Files> </Directory> Alias /media/ /var/www/webroot/ROOT/media/ Alias /static/ /var/www/webroot/ROOT/static/ <Directory /var/www/webroot/ROOT/static> Order deny,allow Allow from all </Directory> <Directory /var/www/webroot/ROOT/media> Order deny,allow Allow from all </Directory>","title":"Step 5: Edit /etc/httpd/conf.d/wsgi.conf"},{"location":"deployment/reclaim-cloud/setup.html#step-6-restart-httpd","text":"1 $ sudo service httpd restart","title":"Step 6: Restart httpd"},{"location":"deployment/reclaim-shared-hosting/pull.html","text":"Pull latest updates into production \u00b6 Step 1. Open a SSH tunnel \u00b6 Open a SSH tunnel to dhinstitutes.org 1 $ ssh dhinstit@dhinstitutes.org Login with the current login credentials. Step 2. Activate the environment \u00b6 The curriculum website lives in its own virtual environment by default, which needs to be activated: 1 $ source virtualenv/curriculum.dhinstitutes.org/3.7/bin/activate Step 3. Navigate into the correct directory \u00b6 Since the curriculum website is a subdomain, it lives inside a folder in the user root. Navigate into the directory: 1 $ cd curriculum.dhinstitutes.org Step 4. Pull \u00b6 Make sure you're in the correct branch (you can check using git status which should provide you with the information that you're on the v1-dev branch, our current production branch). Optional: Pulling from other development branch The example above will always pull from the default branch. If you want to test run a new/different/updated development branch (for instance, if you're working on an issue and want to see it work in production), you would, after step 4 above, checkout a specific brand (in the example below, v1-dev ): 1 $ git checkout --track origin/v1-dev Now, you can pull the latest commits from GitHub: 1 $ git pull Step 5. Collect static files \u00b6 All our static files are served by the static.dhinstitutes.org server, a different subdomain. We want to make sure all the static files are collected there before we restart the app: 1 $ python manage.py collectstatic Important You will be asked whether you want to overwrite existing files. The answer is yes , which you will need to type. Afterwards, you will want to restart the Django app to make sure changes are done.","title":"1. Pulling latest commit"},{"location":"deployment/reclaim-shared-hosting/pull.html#pull-latest-updates-into-production","text":"","title":"Pull latest updates into production"},{"location":"deployment/reclaim-shared-hosting/pull.html#step-1-open-a-ssh-tunnel","text":"Open a SSH tunnel to dhinstitutes.org 1 $ ssh dhinstit@dhinstitutes.org Login with the current login credentials.","title":"Step 1. Open a SSH tunnel"},{"location":"deployment/reclaim-shared-hosting/pull.html#step-2-activate-the-environment","text":"The curriculum website lives in its own virtual environment by default, which needs to be activated: 1 $ source virtualenv/curriculum.dhinstitutes.org/3.7/bin/activate","title":"Step 2. Activate the environment"},{"location":"deployment/reclaim-shared-hosting/pull.html#step-3-navigate-into-the-correct-directory","text":"Since the curriculum website is a subdomain, it lives inside a folder in the user root. Navigate into the directory: 1 $ cd curriculum.dhinstitutes.org","title":"Step 3. Navigate into the correct directory"},{"location":"deployment/reclaim-shared-hosting/pull.html#step-4-pull","text":"Make sure you're in the correct branch (you can check using git status which should provide you with the information that you're on the v1-dev branch, our current production branch). Optional: Pulling from other development branch The example above will always pull from the default branch. If you want to test run a new/different/updated development branch (for instance, if you're working on an issue and want to see it work in production), you would, after step 4 above, checkout a specific brand (in the example below, v1-dev ): 1 $ git checkout --track origin/v1-dev Now, you can pull the latest commits from GitHub: 1 $ git pull","title":"Step 4. Pull"},{"location":"deployment/reclaim-shared-hosting/pull.html#step-5-collect-static-files","text":"All our static files are served by the static.dhinstitutes.org server, a different subdomain. We want to make sure all the static files are collected there before we restart the app: 1 $ python manage.py collectstatic Important You will be asked whether you want to overwrite existing files. The answer is yes , which you will need to type. Afterwards, you will want to restart the Django app to make sure changes are done.","title":"Step 5. Collect static files"},{"location":"deployment/reclaim-shared-hosting/restart.html","text":"Restarting Reclaimed Shared Hosting \u00b6 Step 1. Open Reclaim's administration tool \u00b6 Navigate to the Python Web Application Step 2. Restart \u00b6 Press the restart button (\ud83d\udd04). Note Note that if the DEBUG setting is set to True , the restart will technically not be needed, although it does not hurt. Step 3. Wait \u00b6 Wait for a moment, then reload the page and make sure that everything works the way it should.","title":"2. Restarting hosting"},{"location":"deployment/reclaim-shared-hosting/restart.html#restarting-reclaimed-shared-hosting","text":"","title":"Restarting Reclaimed Shared Hosting"},{"location":"deployment/reclaim-shared-hosting/restart.html#step-1-open-reclaims-administration-tool","text":"Navigate to the Python Web Application","title":"Step 1. Open Reclaim's administration tool"},{"location":"deployment/reclaim-shared-hosting/restart.html#step-2-restart","text":"Press the restart button (\ud83d\udd04). Note Note that if the DEBUG setting is set to True , the restart will technically not be needed, although it does not hurt.","title":"Step 2. Restart"},{"location":"deployment/reclaim-shared-hosting/restart.html#step-3-wait","text":"Wait for a moment, then reload the page and make sure that everything works the way it should.","title":"Step 3. Wait"},{"location":"editing-content/index.html","text":"Getting started as an editor \u00b6 Overview of the workflow \u00b6 This is where we will have information about the duties of the \"editor\" in the editorial workflow\u2014the one who needs to make sure that content gets forked into DHRI-Curriculum, and edited in the correct way. Technically these are all different instructions but we're combining it all here...","title":"Getting started"},{"location":"editing-content/index.html#getting-started-as-an-editor","text":"","title":"Getting started as an editor"},{"location":"editing-content/index.html#overview-of-the-workflow","text":"This is where we will have information about the duties of the \"editor\" in the editorial workflow\u2014the one who needs to make sure that content gets forked into DHRI-Curriculum, and edited in the correct way. Technically these are all different instructions but we're combining it all here...","title":"Overview of the workflow"},{"location":"editing-content/forking-workshop.html","text":"Forking the workshop to the DHRI platform \u00b6 Assuming that you\u2019ve build the workshop in your local user (in my case, under the kallewesterling GitHub user), we now want to clone the workshop to the DHRI-Curriculum \u201cuser\u201d on GitHub. This must be done by someone with fork access to DHRI-Curriculum. Navigate to the new workshop on Github (say, kallewesterling/javascript ) Press the \u201cFork\u201d button in the upper-right-hand corner. A dialog should appear where you have the option of clicking \u201cDHRI-Curriculum.\u201d (If you do not, you don\u2019t have fork access to DHRI-Curriculum on GitHub, and need to ask Lisa or Kalle for access.) Press DHRI-Curriculum, and that should be it. If you need to remove the fork, you can press the \u201cSettings\u201d tab, scroll down to the \u201cDanger Zone,\u201d and press \u201cDelete this repository.\u201d Since the repository was created not as part of the DHRI-Curriculum , this process won\u2019t remove the \u201coriginal\u201d repository\u2014only the fork under the DHRI-Curriculum .","title":"Forking a workshop into our content"},{"location":"editing-content/forking-workshop.html#forking-the-workshop-to-the-dhri-platform","text":"Assuming that you\u2019ve build the workshop in your local user (in my case, under the kallewesterling GitHub user), we now want to clone the workshop to the DHRI-Curriculum \u201cuser\u201d on GitHub. This must be done by someone with fork access to DHRI-Curriculum. Navigate to the new workshop on Github (say, kallewesterling/javascript ) Press the \u201cFork\u201d button in the upper-right-hand corner. A dialog should appear where you have the option of clicking \u201cDHRI-Curriculum.\u201d (If you do not, you don\u2019t have fork access to DHRI-Curriculum on GitHub, and need to ask Lisa or Kalle for access.) Press DHRI-Curriculum, and that should be it. If you need to remove the fork, you can press the \u201cSettings\u201d tab, scroll down to the \u201cDanger Zone,\u201d and press \u201cDelete this repository.\u201d Since the repository was created not as part of the DHRI-Curriculum , this process won\u2019t remove the \u201coriginal\u201d repository\u2014only the fork under the DHRI-Curriculum .","title":"Forking the workshop to the DHRI platform"},{"location":"editing-content/merging-new-terms.html","text":"Merging new terms into the glossary repository \u00b6 When there's a pull request waiting in the glossary repository (instructions are here ), what do you do as an editor?","title":"Merging new terms into the glossary"},{"location":"editing-content/merging-new-terms.html#merging-new-terms-into-the-glossary-repository","text":"When there's a pull request waiting in the glossary repository (instructions are here ), what do you do as an editor?","title":"Merging new terms into the glossary repository"},{"location":"settings/index.html","text":"Getting started with settings \u00b6","title":"Getting started with the settings"},{"location":"settings/index.html#getting-started-with-settings","text":"","title":"Getting started with settings"},{"location":"settings/add-new-user.html","text":"Adding a new user \u00b6 Collecting information \u00b6 For each user, you will need to collect some information: First name(s) Last name(s) Username Pronouns the person uses Password (this can always be changed) Bio Image in JPEG or PNG format (see below) Any professional or personal websites to add to the profile Filling out the YAML file \u00b6 Once you have all the information collected, you can start working in the file backend/setup/users.yml where you want to add the collected information above, in a format that follows this template: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 - first_name : <First name> last_name : <Last name(s)> pronouns : <Which pronouns the person uses> username : usernamewithoutspacesorothercharacters password : <clear-text password here - which means this file should NOT be shared on the internet> bio : <insert bio here and make sure the text block follows YAML linting standard> img : backend/setup/profile-pictures/<firstname-lastname.jpg> <Also don't forget to add this file to the directory -- see below> groups : - Team <see the backend.settings.py file and the dictionary AUTO_GROUPS to find the available groups to add here> blurb : workshop : <slug to the workshop> text : <blurb for the workshop> links : - text : <whatever text you want to show for the link> url : <a valid full URL> cat : <project OR personal> This section needs to be added to whichever category of user you wish to add: SUPER : Has full access to the site and all the database models STAFF : Has backend access to the admin interface, but not necessarily to all the database models. USER : Has no acccess to the admin interface but is a normal \"learner\" on the site. See below for an example of how the YAML file needs to be structured. Adding an image \u00b6 Note: It is important to not forget to add the image file that you list in the users.yml file to the correct directory. Full example of YAML file users.yml \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 by_groups : SUPER : - first_name : Test last_name : Superuser username : test password : test groups : - Team pronouns : \"she\" STAFF : - first_name : Test last_name : Staffuser username : test password : test groups : - Team pronouns : \"he\" USER : - first_name : Test last_name : User username : test password : test groups : - Learner pronouns : \"they\"","title":"Adding a new user"},{"location":"settings/add-new-user.html#adding-a-new-user","text":"","title":"Adding a new user"},{"location":"settings/add-new-user.html#collecting-information","text":"For each user, you will need to collect some information: First name(s) Last name(s) Username Pronouns the person uses Password (this can always be changed) Bio Image in JPEG or PNG format (see below) Any professional or personal websites to add to the profile","title":"Collecting information"},{"location":"settings/add-new-user.html#filling-out-the-yaml-file","text":"Once you have all the information collected, you can start working in the file backend/setup/users.yml where you want to add the collected information above, in a format that follows this template: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 - first_name : <First name> last_name : <Last name(s)> pronouns : <Which pronouns the person uses> username : usernamewithoutspacesorothercharacters password : <clear-text password here - which means this file should NOT be shared on the internet> bio : <insert bio here and make sure the text block follows YAML linting standard> img : backend/setup/profile-pictures/<firstname-lastname.jpg> <Also don't forget to add this file to the directory -- see below> groups : - Team <see the backend.settings.py file and the dictionary AUTO_GROUPS to find the available groups to add here> blurb : workshop : <slug to the workshop> text : <blurb for the workshop> links : - text : <whatever text you want to show for the link> url : <a valid full URL> cat : <project OR personal> This section needs to be added to whichever category of user you wish to add: SUPER : Has full access to the site and all the database models STAFF : Has backend access to the admin interface, but not necessarily to all the database models. USER : Has no acccess to the admin interface but is a normal \"learner\" on the site. See below for an example of how the YAML file needs to be structured.","title":"Filling out the YAML file"},{"location":"settings/add-new-user.html#adding-an-image","text":"Note: It is important to not forget to add the image file that you list in the users.yml file to the correct directory.","title":"Adding an image"},{"location":"settings/add-new-user.html#full-example-of-yaml-file-usersyml","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 by_groups : SUPER : - first_name : Test last_name : Superuser username : test password : test groups : - Team pronouns : \"she\" STAFF : - first_name : Test last_name : Staffuser username : test password : test groups : - Team pronouns : \"he\" USER : - first_name : Test last_name : User username : test password : test groups : - Learner pronouns : \"they\"","title":"Full example of YAML file users.yml"},{"location":"settings/debug-mode.html","text":"Debug mode \u00b6 As we're currently running the Curriculum website in an alpha-mode, the site is running with DEBUG set to True . According to the Django documentation , a production site should never run with DEBUG turned on.","title":"DEBUG"},{"location":"settings/debug-mode.html#debug-mode","text":"As we're currently running the Curriculum website in an alpha-mode, the site is running with DEBUG set to True . According to the Django documentation , a production site should never run with DEBUG turned on.","title":"Debug mode"},{"location":"settings/environment-variables.html","text":"Setting environment variables \u00b6 Which ones are they? \u00b6 The app requires four environment variables to be set in your environment: Variable Description SECRET_KEY Django's own secret keys, which you can read more about here EMAIL_HOST_USER Username for login to the email host EMAIL_HOST_PASSWORD Password for login to the email host GITHUB_TOKEN GitHub token to use for Markdown conversion Backup solution \u00b6 If you are not able to set environment variables correctly, there is a built-in backup solution. Step 1. Create the folder \u00b6 Inside the app folder, create another empty folder called .secrets . Step 2. Create files \u00b6 In the .secrets folder, place each of the environment variables as a file, with only the variable in each file: 1 2 3 4 5 6 app |-- .secrets |-- SECRET_KEY |-- EMAIL_HOST_USER |-- EMAIL_HOST_PASSWORD |-- GITHUB_TOKEN Important Note: No file ending should exist on these files","title":"Environment variables"},{"location":"settings/environment-variables.html#setting-environment-variables","text":"","title":"Setting environment variables"},{"location":"settings/environment-variables.html#which-ones-are-they","text":"The app requires four environment variables to be set in your environment: Variable Description SECRET_KEY Django's own secret keys, which you can read more about here EMAIL_HOST_USER Username for login to the email host EMAIL_HOST_PASSWORD Password for login to the email host GITHUB_TOKEN GitHub token to use for Markdown conversion","title":"Which ones are they?"},{"location":"settings/environment-variables.html#backup-solution","text":"If you are not able to set environment variables correctly, there is a built-in backup solution.","title":"Backup solution"},{"location":"settings/environment-variables.html#step-1-create-the-folder","text":"Inside the app folder, create another empty folder called .secrets .","title":"Step 1. Create the folder"},{"location":"settings/environment-variables.html#step-2-create-files","text":"In the .secrets folder, place each of the environment variables as a file, with only the variable in each file: 1 2 3 4 5 6 app |-- .secrets |-- SECRET_KEY |-- EMAIL_HOST_USER |-- EMAIL_HOST_PASSWORD |-- GITHUB_TOKEN Important Note: No file ending should exist on these files","title":"Step 2. Create files"},{"location":"settings/mysql.html","text":"MySQL settings \u00b6 Currently, we're running the Curriculum website in a sqlite solution, but it's on the roadmap to implement MySQL. Thus, the following information will be important. In order for MySQL to work, you will need to follow these steps. Step 1: Create the file \u00b6 In the root directory (the folder curriculum.dhinstitutes.org after you SSH into the Reclaim server), place a plain file called sql.cnf Step 2: Fill out the information \u00b6 1 2 3 4 5 6 7 8 [client] database = <database name> user = <user with access> password = <password for username> default-character-set = utf8 host = dhinstitutes.org port = 3306 sql_mode = STRICT_TRANS_TABLES Info database in the file used to be dhinstit_curriculum so that might work for you as well.","title":"MySQL settings"},{"location":"settings/mysql.html#mysql-settings","text":"Currently, we're running the Curriculum website in a sqlite solution, but it's on the roadmap to implement MySQL. Thus, the following information will be important. In order for MySQL to work, you will need to follow these steps.","title":"MySQL settings"},{"location":"settings/mysql.html#step-1-create-the-file","text":"In the root directory (the folder curriculum.dhinstitutes.org after you SSH into the Reclaim server), place a plain file called sql.cnf","title":"Step 1: Create the file"},{"location":"settings/mysql.html#step-2-fill-out-the-information","text":"1 2 3 4 5 6 7 8 [client] database = <database name> user = <user with access> password = <password for username> default-character-set = utf8 host = dhinstitutes.org port = 3306 sql_mode = STRICT_TRANS_TABLES Info database in the file used to be dhinstit_curriculum so that might work for you as well.","title":"Step 2: Fill out the information"}]}